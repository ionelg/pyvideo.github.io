<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_christopher-swenson.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2018-05-12T00:00:00+00:00</updated><entry><title>Colossal Cave Adventure in Python... in the browser!</title><link href="http://pyvideo.org/pycon-us-2018/colossal-cave-adventure-in-python-in-the-browser.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Christopher Swenson</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/colossal-cave-adventure-in-python-in-the-browser.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Colossal Cave, also known as Adventure or ADVENT, is the original text adventure. It was written in FORTRAN IV and there is practically no way to run the original program without translating it. We'll explore software archeology to write a Python interpreter to run the FORTRAN code as-is, without translating it. Come learn about pre-ASCII and 36-bit integers and writing interpreters in Python!&lt;/p&gt;
&lt;p&gt;And, we'll show how to use BeeWare's Batavia Python interpreter (in JavaScript) to execute the program. FORTRAN IV in Python in JavaScript in your browser!&lt;/p&gt;
</summary></entry><entry><title>Colossal Cave Adventure in Python</title><link href="http://pyvideo.org/north-bay-python-2017/colossal-cave-adventure-in-python.html" rel="alternate"></link><published>2017-12-02T00:00:00+00:00</published><updated>2017-12-02T00:00:00+00:00</updated><author><name>Christopher Swenson</name></author><id>tag:pyvideo.org,2017-12-02:north-bay-python-2017/colossal-cave-adventure-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The oldest known Colossal Cave source code we have is from 1977 and written for the then 11-year-old PDP-10 in a variant of FORTRAN IV that is now completely defunct and was specific to the PDP-10.&lt;/p&gt;
&lt;p&gt;We'll talk briefly about a history of video games, FORTRAN, and the PDP machines that led to this, and explain how the quirks of this machine were baked into its variant of FORTRAN IV. We'll look at some ancient PDP manuals to discover the secrets you need to know to read this amazing source code.&lt;/p&gt;
&lt;p&gt;We'll delve into how one goes about writing a simple interpreter in Python to run this FORTRAN IV code as-is: translating strings, implementing its odd arithmetic and conditional statements, reading in data from our &amp;quot;tape&amp;quot; drive, how we get input and send output using our &amp;quot;teletype&amp;quot;.&lt;/p&gt;
&lt;p&gt;If you want a demo of this game playing right now, it is running on Heroku and accessible via SMS. Just text anything to +1 (669) 238-3683 (&amp;quot;669 ADVENT3&amp;quot;) to start a game. Send RESET to restart the game. Case doesn't matter when sending commands. It identifies you based on your phone number and will remember your game indefinitely. (We'll also talk about how we achieved this in Heroku.)&lt;/p&gt;
</summary></entry><entry><title>CPython internals and the VM</title><link href="http://pyvideo.org/pycon-au-2016/cpython-internals-and-the-vm.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Christopher Swenson</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/cpython-internals-and-the-vm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Christopher Swenson
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/145/view_talk"&gt;https://2016.pycon-au.org/schedule/145/view_talk&lt;/a&gt;
Ever wanted to know what CPython, the standard Python interpreter, is doing under the hood? What happens at startup before your code is run? How is your code translated to VM bytecode, what does that bytecode mean, and how is it run? In this talk, we'll dive into all of those fun parts!&lt;/p&gt;
&lt;p&gt;This will help you understand what your code is doing under the hood, how to potentially optimize it, and to know the advantages and disadvantages of CPython and how they affect you.&lt;/p&gt;
</summary></entry><entry><title>Sage: Open Source Math in Python</title><link href="http://pyvideo.org/pycon-us-2012/sage-open-source-math-in-python.html" rel="alternate"></link><published>2012-03-09T00:00:00+00:00</published><updated>2012-03-09T00:00:00+00:00</updated><author><name>Christopher Swenson</name></author><id>tag:pyvideo.org,2012-03-09:pycon-us-2012/sage-open-source-math-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A quick introduction to Sage, an open-source mathematics package for
experimentation in all areas of mathematics. There will be some brief
remarks and demos of what Sage is capable of.&lt;/p&gt;
</summary></entry></feed>