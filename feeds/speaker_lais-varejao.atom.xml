<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_lais-varejao.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-04-05T00:00:00+00:00</updated><entry><title>Defining a customizable boilerplate using Django, React and Bootstrap</title><link href="http://pyvideo.org/djangocon-europe-2017/defining-a-customizable-boilerplate-using-django-react-and-bootstrap.html" rel="alternate"></link><published>2017-04-05T00:00:00+00:00</published><updated>2017-04-05T00:00:00+00:00</updated><author><name>Lais Varejao</name></author><id>tag:pyvideo.org,2017-04-05:djangocon-europe-2017/defining-a-customizable-boilerplate-using-django-react-and-bootstrap.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Whether you are a beginner or experienced developer, setting up the initial environment of a project can be a time-consuming task. A common solution for this problem is the use of boilerplates. Not only they reduce the setup time, but also assure strict guidelines are followed. However, most of the available boilerplates cover only one part of the problem - front or back end - and integrations are required to suit your specific needs. So, why not define your own full stack boilerplate?&lt;/p&gt;
&lt;p&gt;In this talk I'll share my experience and present the development process of a customizable Django, React, Bootstrap 4 with Python 3 and webpack project boilerplate. The design decisions, possible configurations and positive impacts of it's application in a production environment.&lt;/p&gt;
</summary></entry></feed>