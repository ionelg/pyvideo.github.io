<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_lukas-kokoska.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-06-09T00:00:00+00:00</updated><entry><title>uWSGI sorcery</title><link href="http://pyvideo.org/pycon-cz-2017/uwsgi-sorcery.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Lukáš Kokoška</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/uwsgi-sorcery.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;uWSGI is an application server used for anything from web pages to
REST APIs. We'll start with a little introduction of this server and
continue with more complicated possibilities to solve problems uWSGI
was designed to solve. I'll show you how to built a robust app,
capable of serving thousands of requests per second.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Programming in Python in more than a decade. Lukáš used to work on
selling digital content, later spent 6 years in Seznam.cz working on
mobile web and related things.&lt;/p&gt;
&lt;p&gt;He now works as a Head of R&amp;amp;D of a small company solving problems of
distributing digital content, telco messaging, eCommerce
(radioteka.cz, palmknihy.cz, galerie.vodafone.cz), and mostly an
advertisement management system for a HbbTV layer in TV broadcast…
all of it designed and implemented in Python.&lt;/p&gt;
</summary></entry></feed>