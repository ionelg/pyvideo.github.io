<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_tennessee-leeuwenburg.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-08-05T00:00:00+00:00</updated><entry><title>Syntax Hijacking: Genius or Evil?</title><link href="http://pyvideo.org/pycon-au-2017/syntax-hijacking-genius-or-evil.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Tennessee Leeuwenburg</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/syntax-hijacking-genius-or-evil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python developers will be familiar with Python's __dunder__ methods, which can be used to define how classes are intended to operate according to various infix operators. For example, the developer can easily control what happens when an object interacts with '+', '-', '[]'. A full list can be found here: &lt;a class="reference external" href="http://www.python-course.eu/python3_magic_methods.php"&gt;http://www.python-course.eu/python3_magic_methods.php&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is used by some frameworks in a sympathetic way, such as matrix multiplication and addition, where the concepts extend very naturally to those classes. It can also be used for more advanced string and natural language processing, where the connection may be less clear. It is also possible to create utter confusion and havoc.&lt;/p&gt;
&lt;p&gt;What is the difference between elegant re-use, and a violation of standard expectations? Should you avoid re-implementing these methods so that basic operators always have reliable semantics, or is it reasonable to create your own object semantics for a domain specific problem?&lt;/p&gt;
&lt;p&gt;This talk will present some of the ways in which the magic methods can be used for ends either wonderful or terrible.&lt;/p&gt;
</summary></entry><entry><title>Using Python in a Data Hackathon</title><link href="http://pyvideo.org/pycon-au-2017/using-python-in-a-data-hackathon.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Tennessee Leeuwenburg</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/using-python-in-a-data-hackathon.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So, you've seen a lot of buzz around hackathons and datathons. Machine learning and data science are all the rage, and the photos of the events on twitter just look amazing. Not to mention free coffee and pastries, if you're lucky. Getting to grips with one of these events can be stressful, particularly when you slam into the reality of trying to get something done in practise.&lt;/p&gt;
&lt;p&gt;This talk provides a basic set of techniques to make sure you're set up ahead of time so you don't lose precious hours downloading packages over an overloaded and shaky WiFi connection, and gets you straight into the fastest way to start working with whatever unwashed dataset the sponsors have decided to throw your way.&lt;/p&gt;
&lt;p&gt;Topics include: setting up your tools, loading large data, working with data subsets, convenience functions for data processing and making pretty pictures&lt;/p&gt;
</summary></entry></feed>