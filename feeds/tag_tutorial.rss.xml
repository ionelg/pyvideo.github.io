<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Thu, 31 Aug 2017 00:00:00 +0000</lastBuildDate><item><title>Accelerating Scientific Code with Numba</title><link>http://pyvideo.org/pydata-london-2015/accelerating-scientific-code-with-numba.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Numba is a just-in-time Python compiler that can be used to speed up
a wide range of scientific and other numerical applications. This
tutorial is intended to provide an introduction to using Numba, and
ways of understanding of the performance of Numba-compiled code.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will provide an overview of
&lt;a class="reference external" href="http://numba.pydata.org/"&gt;Numba&lt;/a&gt;, a just-in-time Python compiler
focused on numerical computing. Originally aimed at computations using
Numpy arrays, it has been expanded to work with other Python types and
can speed up computations that require more than just fast linear
algebra operations. Numba targets both CPUs and CUDA GPUs by generating
native code using the LLVM compiler infrastructure.&lt;/p&gt;
&lt;p&gt;As there are different components of Numba that can be applied in
different circumstances, this introduction aims to span the breadth of
use cases rather than focusing on a single area in depth. This is in
order to enable the selection of appropriate portions of code to use
with Numba, and the correct selection of Numba's facilities in each
case.&lt;/p&gt;
&lt;p&gt;Areas that will be covered include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An overview of the type system, with a view to understanding and
overcoming typing issues,&lt;/li&gt;
&lt;li&gt;Compilation of Python functions using the &lt;tt class="docutils literal"&gt;&amp;#64;jit&lt;/tt&gt; decorator,&lt;/li&gt;
&lt;li&gt;Creation of Numpy ufuncs in Python using the &lt;tt class="docutils literal"&gt;&amp;#64;vectorize&lt;/tt&gt;
decorator,&lt;/li&gt;
&lt;li&gt;Understanding and measuring the performance of Numba-compiled code,&lt;/li&gt;
&lt;li&gt;Debugging facilities in Numba.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tutorial is intended for an audience of programmers and data
scientists who have an interest in speeding up numerical routines, and
people with a general interest in high-performance Python. In order to
get started quickly, it is recommended that attendees install the
&lt;a class="reference external" href="https://store.continuum.io/cshop/anaconda/"&gt;Anaconda Python
distribution&lt;/a&gt; or
&lt;a class="reference external" href="http://conda.pydata.org/miniconda.html"&gt;Miniconda&lt;/a&gt;, as this provides
a robust mechanism for installing Numba on Linux, Mac OS X and Windows.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Markall</dc:creator><pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-06-19:pydata-london-2015/accelerating-scientific-code-with-numba.html</guid><category>tutorial</category></item><item><title>Analysis and transformation of geospatial data using Python</title><link>http://pyvideo.org/pydata-london-2015/analysis-and-transformation-of-geospatial-data-using-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A tutorial covering some general concepts of geospatial data, main
formats in which it is distributed and some common places where this
data can be acquired. We will also learn how to read, process and
visualise this data using Python and QGIS. This talk will cover some
typical problems one can experience when working with geospatial
data.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;Installing tools and packages (ansible scripts/cloud machine will be
provided)&lt;/li&gt;
&lt;li&gt;Basic concepts&lt;/li&gt;
&lt;li&gt;geometries. Fixing invalid geometries.&lt;/li&gt;
&lt;li&gt;basic operations (union, intersection, difference)&lt;/li&gt;
&lt;li&gt;advanced operations (buffer, convex hull, skeleton, voronoi)&lt;/li&gt;
&lt;li&gt;Formats and tools&lt;/li&gt;
&lt;li&gt;Shapefile&lt;/li&gt;
&lt;li&gt;GeoJSON&lt;/li&gt;
&lt;li&gt;TopoJSON&lt;/li&gt;
&lt;li&gt;GeoTIFF&lt;/li&gt;
&lt;li&gt;OSM data&lt;/li&gt;
&lt;li&gt;Projections&lt;/li&gt;
&lt;li&gt;common projections and their use&lt;/li&gt;
&lt;li&gt;how to chose the projection&lt;/li&gt;
&lt;li&gt;reprojecting datasets&lt;/li&gt;
&lt;li&gt;Using geospatial index&lt;/li&gt;
&lt;li&gt;Open Geospatial datasets&lt;/li&gt;
&lt;li&gt;UK specific datasets&lt;/li&gt;
&lt;li&gt;OpenStreetMap&lt;/li&gt;
&lt;li&gt;elevation data&lt;/li&gt;
&lt;li&gt;Geocoding&lt;/li&gt;
&lt;li&gt;Storing geospatial data in databases (PostgreSQL, SpatiaLite,
MongoDB, ElasticSearch)&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Demeter Sztanko</dc:creator><pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-06-19:pydata-london-2015/analysis-and-transformation-of-geospatial-data-using-python.html</guid><category>tutorial</category></item><item><title>Getting Started with Cloud Foundry for Data Science</title><link>http://pyvideo.org/pydata-london-2015/getting-started-with-cloud-foundry-for-data-science.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Cloud Foundry is an open source Platform-as-a-Service that can be
used to easily deliver data driven applications. In this tutorial we
will learn how to push an application to a real CF instance, how to
connect to managed data services like Redis and PostgreSQL and how to
deploy PyData and R projects using community buildpacks.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://cloudfoundry.org/"&gt;Cloud Foundry&lt;/a&gt; is an open source
Platform-as-a- Service that can be used to easily deliver data driven
applications. In this tutorial we will learn how to push an application
to a real CF instance, how to connect to managed data services like
Redis and PostgreSQL and how to deploy PyData and R projects using
community buildpacks.&lt;/p&gt;
&lt;p&gt;By the end of the tutorial participants will know how to _ deploy your
first app using Cloud Foundry, _ connect to databases and other data
services, _ use PyData packages with a Heroku-style buildpack, _ find
public and private Cloud Foundry installation options.&lt;/p&gt;
&lt;p&gt;Participants will need to register on a public Cloud Foundry instance to
follow along with the tutorial. Detailed instructions will be provided
for &lt;a class="reference external" href="http://run.pivotal.io/"&gt;Pivotal Web Services&lt;/a&gt; which offers a 60
day free trial. Other options include IBM Bluemix and HP Helion
Development Platform.&lt;/p&gt;
&lt;p&gt;Participants should be comfortable on the command line and download and
install the &lt;a class="reference external" href="http://docs.cloudfoundry.org/devguide/installcf/install-go-cli.html"&gt;CF CLI
tools&lt;/a&gt;
before the tutorial.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Huston</dc:creator><pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-06-19:pydata-london-2015/getting-started-with-cloud-foundry-for-data-science.html</guid><category>tutorial</category></item><item><title>How “good” is your model, and how can you make it better?</title><link>http://pyvideo.org/pydata-london-2015/how-good-is-your-model-and-how-can-you-make-it-better.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This hands-on tutorial will show you how to use scikit-learn’s model
evaluation functions to evaluate different models in terms of
accuracy and generalisability, and search for optimal parameter
configurations.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The objective of this tutorial is to give participants the skills
required to validate, evaluate and fine-tune models using scikit-learn’s
evaluation metrics and parameter search capabilities. It will combine
both the theoretical rationale behind these methods and their code
implementation.&lt;/p&gt;
&lt;p&gt;The session will be structured as follows (rough timings in
parentheses):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Explanation of over-fitting and the bias-variance trade-off, followed
by a brief conceptual overview of cross-validation, bootstrapping,
and ensemble methods, in particular with respect to bias and
variance. Pointers to the corresponding scikit-learn functions will
also be given. (20 minutes)&lt;/li&gt;
&lt;li&gt;Implementation of cross-validation and grid-search method for
parameter tuning, using KNN classification as an illustrative
example. Participants will train two KNN neighbours with different
numbers of neighbours on preprocessed data (provided). They will then
be guided through cross-validation, plotting of results, and
grid-search to find the best neighbour and weight configuration(s).
(30 minutes)&lt;/li&gt;
&lt;li&gt;Comparison of different classification models using cross-validation.
Participants will implement a logistic regression, linear and
non-linear support vector machine (SVM) or neural network model and
apply the same cross-validation and grid search method as in the
guided KNN example. Participants will then compare their plots,
evaluate their results and discuss which model they might choose for
different objectives, trading off generalisability, accuracy, speed
and randomness. (70 minutes)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We assume participants will be familiar with numpy, matplotlib, and at
least the intuition behind some of the main classification algorithms.
Before the tutorial, participants with github accounts should fork from
&lt;a class="reference external" href="https://github.com/cambridgecoding/pydata-tutorial"&gt;https://github.com/cambridgecoding/pydata-tutorial&lt;/a&gt; or download the files
and iPython notebook so they can participate in the hands on activities.
Required libraries: numpy, scikit-learn, matplotlib, pandas, scipy,
multilayer_perceptron (provided)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chih-Chun Chen</dc:creator><pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-06-19:pydata-london-2015/how-good-is-your-model-and-how-can-you-make-it-better.html</guid><category>tutorial</category></item><item><title>Bokeh - Interactive Visualization for Large Datasets</title><link>http://pyvideo.org/pydata-london-2014/bokeh-interactive-visualization-for-large-datasets.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bokeh is a Python interactive visualization library for large datasets
that natively uses the latest web technologies. Its goal is to provide
elegant, concise construction of novel graphics in the style of
Protovis/D3, while delivering high-performance interactivity over large
data to thin clients. This tutorial will walk users through the steps to
create different kinds of interactive plots using Bokeh. We will cover
using Bokeh for static HTML output, the IPython notebook, and plot
hosting and embedding using the Bokeh server.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bryan Van De Ven</dc:creator><pubDate>Fri, 21 Feb 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-02-21:pydata-london-2014/bokeh-interactive-visualization-for-large-datasets.html</guid><category>tutorial</category></item><item><title>Keras</title><link>http://pyvideo.org/euroscipy-2017/keras.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Goal of the Tutorial&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Introduce&lt;/strong&gt; main features of Keras APIs to build Neural Networks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learn&lt;/strong&gt; how to implement simple and complex Deep Neural Networks
Architectures using Keras.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Discover&lt;/strong&gt; Keras Implementation and Internals.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: examples and hands-on exercises will be provided along the
way.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;em&gt;Multi-layer Fully Connected Networks (and the ``backends``)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bottleneck features and Embeddings&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Convolutional Networks&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Transfer Learning and Fine Tuning&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Residual Networks&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Recursive Neural Networks&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[Variational] AutoEncoders and Adversarials&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Multi-Modal Networks&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Custom Layers and Optimisers&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Interactive Networks and Callbacks&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="description"&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;div class="first line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;Multi-layer Fully Connected Networks&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;In this notebook we will learn the basic building blocks of Keras
APIs to create deep neural networks. We will learn how to use the
&lt;tt class="docutils literal"&gt;Sequential&lt;/tt&gt; object as well as &lt;em&gt;Functional&lt;/em&gt; and &lt;tt class="docutils literal"&gt;keras.backend&lt;/tt&gt;
APIs. First examples of MLP and Fully Connected Networks will be
presented.&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div class="first line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;Bootleneck Features and Embeddings&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;After having played a bit with Keras APIs for building networks, we
start learn how to inspect network's internals. In details, we will
learn (1) how to iterate over layers; (2) how to initialise and get
weights; (3) how to extract bottleneck features and create
embeddings.&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div class="first line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;Convolutional Networks&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;This notebook will teach how to build CNN (Convolutional Neural
Networks). Convolutional, Pooling, DropOut layers will be
presented, along with clear description on how to properly apply
convolutions on images, depending on &lt;tt class="docutils literal"&gt;image_dim_ordering&lt;/tt&gt;
setting.&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div class="first line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;Transfer Learning and Fine Tuning&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;The Keras implementation of some famous Deep Convolutional Networks
will be presented (i.e. &lt;tt class="docutils literal"&gt;keras.applications.vgg16&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;keras.applications.vgg19&lt;/tt&gt;, and
&lt;tt class="docutils literal"&gt;keras.applications.inceptionv3&lt;/tt&gt;). We will learn how to leverage
on these models for transfer learning and fine tuning using Keras
&lt;tt class="docutils literal"&gt;Layer&lt;/tt&gt; APIs.&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div class="first line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;Residual Networks&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;In this notebook, Residual Networks will be presented. In
particular, the Keras implementation of the residual network
topology will be explained. Then, ResNet
(&lt;tt class="docutils literal"&gt;keras.applications.resnet50&lt;/tt&gt;) Keras implementation will be
detailed.&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div class="first line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;Recurrent Neural Networks&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;Recurrent Neural Networks (i.e. LSTM and GRU) are the main topic of
this notebook. The Keras implementation of these two types of
network will be presented along with working examples combining
Word Embeddings and Convolutional Layers (i.e.
&lt;tt class="docutils literal"&gt;keras.layers.convolutional_recurrent&lt;/tt&gt;)&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div class="first line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;[Variational] AutoEncoders and Adversarials&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;This notebook will be devoted to show how to implement AutoEncoders
in Keras. In particular, the implementation of Stacked
AutoEncoders, Variational AutoEncoders and Generative Adversarial
Networks will be presented.&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div class="first line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;Multi-Modal Networks&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;Multi-Input and Multi-task Networks are the fundamental steps for
advanced deep networks. This notebook will provide implementation
recipes and examples.&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div class="first line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;Custom Layers and Optimisers&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;This notebook will provide details and examples of Keras internals.
In particular, we will learn how to implement a Custom Layer in
Keras, and custom Activation functions, and custom optimisers.&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div class="first line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;Interactive Networks and Callbacks&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;In this last notebook, &lt;tt class="docutils literal"&gt;keras.callbacks&lt;/tt&gt; will be explained.
Callbacks to track and monitor network performances during the
training process will be built and integrated inside a web app.
Finally, an example of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;keras-js&lt;/span&gt;&lt;/tt&gt; will be described, detailing
functions in Keras to export models and weights (in &lt;tt class="docutils literal"&gt;json&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;hdf5&lt;/tt&gt; formats).&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h4&gt;Requirements&lt;/h4&gt;
&lt;p&gt;This tutorial requires the following packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;div class="first line-block"&gt;
&lt;div class="line"&gt;Python version 3.5.x&lt;/div&gt;
&lt;div class="line"&gt;- Python 3.4 is fine as well&lt;/div&gt;
&lt;div class="line"&gt;- likely Python 2.7 would also be fine, but &lt;em&gt;who knows&lt;/em&gt;? :P&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; version 1.10 or later: &lt;a class="reference external" href="http://www.numpy.org/"&gt;http://www.numpy.org/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;scipy&lt;/tt&gt; version 0.16 or later: &lt;a class="reference external" href="http://www.scipy.org/"&gt;http://www.scipy.org/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;matplotlib&lt;/tt&gt; version 1.4 or later: &lt;a class="reference external" href="http://matplotlib.org/"&gt;http://matplotlib.org/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;pandas&lt;/tt&gt; version 0.16 or later: &lt;a class="reference external" href="http://pandas.pydata.org"&gt;http://pandas.pydata.org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;scikit-learn&lt;/span&gt;&lt;/tt&gt; version 0.15 or later: &lt;a class="reference external" href="http://scikit-learn.org"&gt;http://scikit-learn.org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;keras&lt;/tt&gt; version 1.0 or later: &lt;a class="reference external" href="http://keras.io"&gt;http://keras.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;tensorflow&lt;/tt&gt; version 0.9 or later: &lt;a class="reference external" href="https://www.tensorflow.org"&gt;https://www.tensorflow.org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;jupyter&lt;/tt&gt; version 4.0 or later, with notebook support&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Optional but recommended):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pyyaml&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;hdf5&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;h5py&lt;/tt&gt; (required if you use model saving/loading
functions in keras)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The easiest way to get (most) these is to use an all-in-one installer
such as &lt;a class="reference external" href="http://www.continuum.io/downloads"&gt;Anaconda&lt;/a&gt; from Continuum.
These are available for multiple architectures.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valerio Maggio</dc:creator><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-31:euroscipy-2017/keras.html</guid><category>tutorial</category></item><item><title>Matplotlib</title><link>http://pyvideo.org/euroscipy-2017/matplotlib.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is for Python users who would like to create nice 2d plots
with Python.&lt;/p&gt;
&lt;div class="section" id="audience-level"&gt;
&lt;h4&gt;Audience Level&lt;/h4&gt;
&lt;p&gt;Students should have a working knowledge of Python. NumPy knowledge is
helpful but not required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h4&gt;Prerequisites&lt;/h4&gt;
&lt;p&gt;Please bring your laptop with the operating system of your choice
(Linux, Mac OS X, Windows). In addition to Python 3.6 (2.7 works if
really want to use it), we need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a current versions of matplotlib (&lt;a class="reference external" href="http://matplotlib.sourceforge.net"&gt;http://matplotlib.sourceforge.net&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Jupyter (&lt;a class="reference external" href="http://jupyter.org/"&gt;http://jupyter.org/&lt;/a&gt;) and&lt;/li&gt;
&lt;li&gt;NumPy (&lt;a class="reference external" href="http://numpy.scipy.org"&gt;http://numpy.scipy.org&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you use Anaconda you should have all requirements installed. If you
use a new &lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; environment install with:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;conda install jupyter numpy matplotlib&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The same goes for &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;pip install jupyter numpy matplotlib&lt;/tt&gt;&lt;/p&gt;
&lt;div class="section" id="method"&gt;
&lt;h5&gt;Method&lt;/h5&gt;
&lt;p&gt;This is a hands-on course. Students are strongly encouraged to work
along with the trainer at the interactive prompt. There will be
exercises the students need to do on their own. Experience shows that
this active involvement is essential for an effective learning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="content"&gt;
&lt;h5&gt;Content&lt;/h5&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The library matplotlib provides many different types of diagrams from
within Python with only few lines of code. Examples are used to
exercise the use of this library. The tutorial provides an overview
how to create plots . Using matplotlib from Jupyter Notebook provides
an interactive environment for fast testing of ideas. We will be using
this for most of the tutorial.&lt;/div&gt;
&lt;div class="line"&gt;With a simple plot we learn how to add axis labels, titles and a
legend. The GUI offers zooming, panning, changing of plot sizes and
other interactive ways to modify the plot. We will use Python to
change properties of existing plots such as line colors, marker
symbols, or line styles. There are several ways how to place text on
plots. You will learn about the different coordinate systems relative
to the plot, the canvas or the figure. Another topic are ticks, where
to put them and how to format them to achieve publication-quality
plots. The concepts of figures, subplots, and axes and how they relate
to each other will be explained with examples.&lt;/div&gt;
&lt;div class="line"&gt;Matplotlib offers many different types of plots. The tutorial
introduces several of them with an example. A more advanced topic will
be creating your own plot types. Finally, we will create a small
animation to explore the possibilities to visualize changes.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="outline"&gt;
&lt;h5&gt;Outline&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Jupyter&lt;/li&gt;
&lt;li&gt;Simple plots&lt;/li&gt;
&lt;li&gt;Properties&lt;/li&gt;
&lt;li&gt;Text&lt;/li&gt;
&lt;li&gt;Ticks&lt;/li&gt;
&lt;li&gt;Figures, subplots, and axes&lt;/li&gt;
&lt;li&gt;Other types of plots&lt;/li&gt;
&lt;li&gt;The class library&lt;/li&gt;
&lt;li&gt;Creating New Plot Types&lt;/li&gt;
&lt;li&gt;Animations&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="audience-level-novice"&gt;
&lt;h6&gt;Audience level: Novice&lt;/h6&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Müller</dc:creator><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-31:euroscipy-2017/matplotlib.html</guid><category>tutorial</category></item><item><title>NetworkX</title><link>http://pyvideo.org/euroscipy-2017/networkx.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;working with graphs using python and the NetworkX package. This will be
a hands on tutorial and will require writing a lot of code snippets. The
participants should be comfortable with basic python (loops,
dictionaries, lists) and some(minimal) experience with working inside a
jupyter notebook.&lt;/p&gt;
&lt;p&gt;Broadly the tutorial is divided into four parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Part A (20 mins)&lt;ul&gt;
&lt;li&gt;Basics of graph theory and various examples of networks in real life.&lt;/li&gt;
&lt;li&gt;Introduction to the NetworkX API and various data structures&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Part B (30 mins)&lt;ul&gt;
&lt;li&gt;Work with small synthetic networks (generated using random graph
generators) to understand the structure of the network.&lt;/li&gt;
&lt;li&gt;Analyse the network and study various properties of the network like
centrality, connectivity, shortest paths, cliques.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Part C (30 mins)&lt;ul&gt;
&lt;li&gt;We'll use the various techniques we have learnt so far and model a
network out of real world data like co-authorship network(
&lt;a class="reference external" href="http://www-personal.umich.edu/~mejn/netdata/cond-mat-2005.zip"&gt;http://www-personal.umich.edu/~mejn/netdata/cond-mat-2005.zip&lt;/a&gt;) and
study the structure and properties of this network.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Part D (10 mins)&lt;ul&gt;
&lt;li&gt;We'll work on some interesting problems like temporal networks and
visualisation of networks. - We'll model the US Airport Network with
respect to time and will try to make sense out of it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By the end of the tutorial everyone should be comfortable with hacking
on the NetworkX API, modelling data as networks and basic analysis on
networks using python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mridul Seth</dc:creator><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-31:euroscipy-2017/networkx.html</guid><category>tutorial</category></item><item><title>Pandas</title><link>http://pyvideo.org/euroscipy-2017/pandas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is nowadays the library of choice for manipulating and analysing structured data, providing high-performance, easy-to-use data structures and data analysis tools.&lt;/p&gt;
&lt;p&gt;This hands-on tutorial will give a basic introduction to pandas, guide you through the different data structures and its manipulation, explaining the the key concepts and defining features. No prior knowledge about pandas is required.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joris Van den Bossche</dc:creator><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-31:euroscipy-2017/pandas.html</guid><category>tutorial</category><category>pandas</category></item><item><title>Scikit-image</title><link>http://pyvideo.org/euroscipy-2017/scikit-image.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tutorial materials can be found on
&lt;a class="reference external" href="https://github.com/emmanuelle/scikit-image-euroscipy2017"&gt;https://github.com/emmanuelle/scikit-image-euroscipy2017&lt;/a&gt;: you can
download a zip on
&lt;a class="reference external" href="https://github.com/emmanuelle/scikit-image-euroscipy2017/archive/master.zip"&gt;https://github.com/emmanuelle/scikit-image-euroscipy2017/archive/master.zip&lt;/a&gt;.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;If you installed Anaconda or Canopy, you already have scikit-image
installed.&lt;/div&gt;
&lt;div class="line"&gt;Otherwise, see &lt;a class="reference external" href="http://scikit-image.org/docs/stable/install.html"&gt;http://scikit-image.org/docs/stable/install.html&lt;/a&gt; for
installation instructions.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;scikit-image version 0.12 or 0.13 is preferable.&lt;/p&gt;
&lt;p&gt;Test code&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from skimage import io, data
&amp;gt;&amp;gt;&amp;gt; camera = data.camera()
&amp;gt;&amp;gt;&amp;gt; io.imshow(camera)
&lt;/pre&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emmanuelle Gouillart</dc:creator><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-31:euroscipy-2017/scikit-image.html</guid><category>tutorial</category><category>scikit-image</category></item><item><title>SymPy</title><link>http://pyvideo.org/euroscipy-2017/sympy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To follow the SymPy tutorial, please go to
&lt;a class="reference external" href="https://github.com/leosartaj/euroscipy-sympy-tutorial"&gt;https://github.com/leosartaj/euroscipy-sympy-tutorial&lt;/a&gt; This link contains
all the notebooks and instructions to install the required software.
Additionally run &lt;tt class="docutils literal"&gt;python test_installation.py&lt;/tt&gt; to check your
installation. I will be updating the notebooks, so please pull the
latest copy before the tutorial.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sartaj Singh</dc:creator><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-31:euroscipy-2017/sympy.html</guid><category>tutorial</category><category>simpy</category></item><item><title>Advanced data wrangling with pandas</title><link>http://pyvideo.org/euroscipy-2017/advanced-data-wrangling-with-pandas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is nowadays the library of choice for manipulating and analysing structured data, providing high-performance, easy-to-use data structures and data analysis tools.&lt;/p&gt;
&lt;p&gt;In this hands-on tutorial on using pandas for data analysis, you will be guided through some of the powerful methods and concepts in pandas, including time series manipulation (resampling and rolling operations), groupby operations, reshaping with stack/unstack/pivot, …&lt;/p&gt;
&lt;p&gt;Basic familiarity with pandas data structures (Series/DataFrame) is assumed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joris Van den Bossche</dc:creator><pubDate>Wed, 30 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-30:euroscipy-2017/advanced-data-wrangling-with-pandas.html</guid><category>tutorial</category></item><item><title>Scikit-learn (1/2)</title><link>http://pyvideo.org/euroscipy-2017/scikit-learn-12.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Please install the following packages (either with pip or conda):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;scikit-learn 0.19.0 (along with numpy and scipy as dependencies)&lt;/li&gt;
&lt;li&gt;pandas&lt;/li&gt;
&lt;li&gt;matplotlib&lt;/li&gt;
&lt;li&gt;jupyter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check the scikit-learn version with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -c &amp;quot;import sklearn; print(sklearn.__version__)&amp;quot;
&lt;/pre&gt;
&lt;p&gt;If you have an old version you can upgrade to scikit-learn 0.19.0 with
&lt;tt class="docutils literal"&gt;conda update &lt;span class="pre"&gt;scikit-learn&lt;/span&gt;&lt;/tt&gt; if you use conda or
&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-U&lt;/span&gt; &lt;span class="pre"&gt;scikit-learn&lt;/span&gt;&lt;/tt&gt; otherwise.&lt;/p&gt;
&lt;p&gt;We recommend using Python 3.6 but the tutorial material should also work
with older Python versions (including Python 2.7, but please please
consider using Python 3.6 instead).&lt;/p&gt;
&lt;p&gt;In addition you can also install
&lt;a class="reference external" href="https://scikit-optimize.github.io/"&gt;scikit-optimize&lt;/a&gt; (if you use a
conda environment, you need to first &lt;tt class="docutils literal"&gt;conda install pip&lt;/tt&gt; and then
&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;scikit-optimize&lt;/span&gt;&lt;/tt&gt;) in that environment. scikit-optimize
has a dependency on scikit-garden which does not yet provide any binary
package and can fail to install automatically from source on systems
that lack a properly configured C/C++ compiler. If you have trouble
installing scikit-garden and scikit-optimize, don't worry you will be
able to follow those sections on the video projector while still being
able to run the exercises of the other sections that only require
scikit-learn.&lt;/p&gt;
&lt;p&gt;The notebooks will be published on
&lt;a class="reference external" href="https://github.com/ogrisel/euroscipy_2017_sklearn"&gt;https://github.com/ogrisel/euroscipy_2017_sklearn&lt;/a&gt; (please update on
Sunday evening or at the beginning of the tutorial assuming wifi is good
enough).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olivier Grisel</dc:creator><pubDate>Wed, 30 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-30:euroscipy-2017/scikit-learn-12.html</guid><category>tutorial</category><category>scikit-learn</category></item><item><title>Scikit-learn (2/2)</title><link>http://pyvideo.org/euroscipy-2017/scikit-learn-22.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Please install the following packages (either with pip or conda):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;scikit-learn 0.19.0 (along with numpy and scipy as dependencies)&lt;/li&gt;
&lt;li&gt;pandas&lt;/li&gt;
&lt;li&gt;matplotlib&lt;/li&gt;
&lt;li&gt;jupyter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check the scikit-learn version with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -c &amp;quot;import sklearn; print(sklearn.__version__)&amp;quot;
&lt;/pre&gt;
&lt;p&gt;If you have an old version you can upgrade to scikit-learn 0.19.0 with
&lt;tt class="docutils literal"&gt;conda update &lt;span class="pre"&gt;scikit-learn&lt;/span&gt;&lt;/tt&gt; if you use conda or
&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-U&lt;/span&gt; &lt;span class="pre"&gt;scikit-learn&lt;/span&gt;&lt;/tt&gt; otherwise.&lt;/p&gt;
&lt;p&gt;We recommend using Python 3.6 but the tutorial material should also work
with older Python versions (including Python 2.7, but please please
consider using Python 3.6 instead).&lt;/p&gt;
&lt;p&gt;In addition you can also install
&lt;a class="reference external" href="https://scikit-optimize.github.io/"&gt;scikit-optimize&lt;/a&gt; (if you use a
conda environment, you need to first &lt;tt class="docutils literal"&gt;conda install pip&lt;/tt&gt; and then
&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;scikit-optimize&lt;/span&gt;&lt;/tt&gt;) in that environment. scikit-optimize
has a dependency on scikit-garden which does not yet provide any binary
package and can fail to install automatically from source on systems
that lack a properly configured C/C++ compiler. If you have trouble
installing scikit-garden and scikit-optimize, don't worry you will be
able to follow those sections on the video projector while still being
able to run the exercises of the other sections that only require
scikit-learn.&lt;/p&gt;
&lt;p&gt;The notebooks will be published on
&lt;a class="reference external" href="https://github.com/ogrisel/euroscipy_2017_sklearn"&gt;https://github.com/ogrisel/euroscipy_2017_sklearn&lt;/a&gt; (please update on
Sunday evening or at the beginning of the tutorial assuming wifi is good
enough).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olivier Grisel</dc:creator><pubDate>Wed, 30 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-30:euroscipy-2017/scikit-learn-22.html</guid><category>tutorial</category><category>scikit-learn</category></item><item><title>Advanced Metaphors in Coding with Python</title><link>http://pyvideo.org/pydata-berlin-2017/advanced-metaphors-in-coding-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;www.pydata.org&lt;/p&gt;
&lt;p&gt;PyData is an educational program of NumFOCUS, a 501(c)3 non-profit organization in the United States. PyData provides a forum for the international community of users and developers of data analysis tools to share ideas and learn from each other. The global PyData network promotes discussion of best practices, new approaches, and emerging technologies for data management, processing, analytics, and visualization. PyData communities approach data science using many languages, including (but not limited to) Python, Julia, and R.&lt;/p&gt;
&lt;p&gt;PyData conferences aim to be accessible and community-driven, with novice to advanced level presentations. PyData tutorials and talks bring attendees the latest project features along with cutting-edge use cases.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-30:pydata-berlin-2017/advanced-metaphors-in-coding-with-python.html</guid><category>tutorial</category></item><item><title>Best Practices for Debugging</title><link>http://pyvideo.org/pydata-berlin-2017/best-practices-for-debugging.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial introduces concepts and techniques for systematic debugging. Participants will debug example programs with different kinds of bugs and with increasing difficulty.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Debugging is a daily activity of any programmer. Frequently, it is assumed that programmers can debug. However, programmers often have to deal with existing code that simply does not work. This tutorial attempts to change that by introducing concepts for debugging and corresponding programming techniques.&lt;/p&gt;
&lt;p&gt;In this tutorial, participants will learn strategies for systematically debugging Python programs. We will work through a series of examples, each with a different kind of bug and with increasing difficulty. The training will be interactive, combining one-person and group activities, to improve your debugging skills in an entertaining way.&lt;/p&gt;
&lt;p&gt;Contents:
Syntax Error against Runtime exceptions
Debugging with the scientific method
Inspection of variables with print and introspection functions
Using an interactive debugger
Logging
Code Review&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Kristian Rother</dc:creator><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-30:pydata-berlin-2017/best-practices-for-debugging.html</guid><category>tutorial</category></item><item><title>Introduction to Data-Analysis with Pandas</title><link>http://pyvideo.org/pydata-berlin-2017/introduction-to-data-analysis-with-pandas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is the Swiss-Multipurpose Knife for Data Analysis in Python. With Pandas dealing with data-analysis is easy and simple but there are some things you need to get your head around first as Data-Frames and Data-Series. The tutorial provides a compact introduction to Pandas for beginners for I/O, data visualisation, statistical data analysis and aggregation within Jupiter notebooks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pandas is the Swiss-Multipurpose Knife for Data Analysis in Python. With Pandas dealing with data-analysis is easy and simple but there are some things you need to get your head around first as Data-Frames and Data-Series.&lt;/p&gt;
&lt;p&gt;The tutorial provides a compact introduction to Pandas for beginners:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;reading and writing data across multiple formats (CSV, Excel, JSON, SQL, HTML,…)&lt;/li&gt;
&lt;li&gt;data visualisation&lt;/li&gt;
&lt;li&gt;statistical data analysis and aggregation.&lt;/li&gt;
&lt;li&gt;work with built-in data visualisation&lt;/li&gt;
&lt;li&gt;inner-mechanics of Pandas: Data-Frames, Data-Series &amp;amp; Numpy.&lt;/li&gt;
&lt;li&gt;working and making the most of indexes.&lt;/li&gt;
&lt;li&gt;how to mangle, reshape and pivot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tutorial will be provided as Jupiter notebooks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Hendorf</dc:creator><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-30:pydata-berlin-2017/introduction-to-data-analysis-with-pandas.html</guid><category>tutorial</category></item><item><title>Introduction to Julia for Scientific Computing and Data Science</title><link>http://pyvideo.org/pydata-berlin-2017/introduction-to-julia-for-scientific-computing-and-data-science.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developed at MIT, with a focus on fast numerical computing, Julia has a syntactical complexity similar to that of Python or Matlab but a performance orders of magnitude faster. We will present an introduction to the language, followed by a sampling of some of our favourite packages. The focus is on which aspects of Julia are currently ready for use by numerical computing and data scientists.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Julia is a new and exciting language, sponsored in part by NumFocus, and developed at MIT. With a focus on fast numerical computing, it has a syntactical complexity similar to that of Python or Matlab but a performance orders of magnitude faster. This means you can quickly code up your ideas in a scripting language, but you don't need to switch langauges when you later need to squeeze out every last ounce of performance on production data.&lt;/p&gt;
&lt;p&gt;Should you stick with Python, or is it time to move to Julia?&lt;/p&gt;
&lt;p&gt;We will try to answer this question by presenting an introduction to the language, followed by a sampling of packages from the most important projects relevant to data and numerical science. Python has become a powerhouse in these fields largely due to its available libraries. Julia is fast making up this ground, with an integrated package manager and the ability to call Python libraries, we will show where the gap has already been bridged and where there is still reason to hold back. We will demonstrate that the language syntax is already as easy as the simplest specialist alternatives (eg. Matlab/Mathematica/S-Plus), but this is a fully fledged programming language, and the libraries are no longer necessarily a reason to hold back.&lt;/p&gt;
&lt;p&gt;The Tutorial format&lt;/p&gt;
&lt;p&gt;We will begin by introducing the basic syntax, showing the paths of least resistance for users moving from Python, Matlab and other major languages. We will quickly move-on to explain the details of how Julia is different from other scripted programming languages. Typically, these differences, such as the system of multiple dispatch, have been specifically chosen as they allow for faster runtimes from scripted code without impacting on read/writeability. Finally, we will work through some specific examples of Visualisation (Plots.jl), Data Wrangling (ie DataFrame-type options), Numerical Optimisation (JuliaOpt/JuMP.jl) and High-Performance Computing (JuliaGPU/OpenCL.jl, also profiling, benchmarking and debugging if time allows) as an introduction to some of the packages currently available in the Julia package ecosystem.&lt;/p&gt;
&lt;p&gt;Note: this is an interactive tutorial please follow the Installation Instructions, which will be posted at &lt;a class="reference external" href="https://github.com/daveh19/pydataberlin2017"&gt;https://github.com/daveh19/pydataberlin2017&lt;/a&gt; shortly before the meeting, if you wish to participate!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Higgins</dc:creator><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-30:pydata-berlin-2017/introduction-to-julia-for-scientific-computing-and-data-science.html</guid><category>tutorial</category></item><item><title>Introduction to Machine Learning with H2O and Python</title><link>http://pyvideo.org/pydata-berlin-2017/introduction-to-machine-learning-with-h2o-and-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;H2O.ai is focused on bringing AI to businesses through software. Its flagship product is H2O, the leading open source platform that makes it easy for financial services, insurance and healthcare companies to deploy machine learning and predictive analytics to solve complex problems.&lt;/p&gt;
&lt;p&gt;This tutorial aims to demonstrate the basic usage of H2O with worked examples in Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;About H2O.ai&lt;/p&gt;
&lt;p&gt;H2O.ai is focused on bringing AI to businesses through software. Its flagship product is H2O, the leading open source platform that makes it easy for financial services, insurance and healthcare companies to deploy machine learning and predictive analytics to solve complex problems. More than 8,500+ organizations and 75,000+ data scientists depend on H2O for critical applications like predictive maintenance and operational intelligence. The company accelerates business transformation for 107 Fortune 500 enterprises, 8 of the world’s 12 largest banks, 7 of the 10 largest auto insurance companies and all 5 major telecommunications providers. Notable customers include Capital One, Progressive Insurance, Transamerica, Comcast, Nielsen Catalina Solutions, Macy's, Walgreens, Kaiser Permanente, and Aetna.&lt;/p&gt;
&lt;p&gt;This tutorial aims to demonstrate the basic usage of H2O with worked examples in Python. Code and data for the worked examples will be provided.&lt;/p&gt;
&lt;p&gt;Learning Objectives
By the end of the tutorial, participants will be able to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Start and connect to a local H2O cluster from Python.&lt;/li&gt;
&lt;li&gt;Start and connect to H2O cluster(s) on the cloud (e.g. AWS) (i.e. straight-forward distributed machine learning)&lt;/li&gt;
&lt;li&gt;Import data from Python data frames, local files or web.&lt;/li&gt;
&lt;li&gt;Perform basic data transformation and exploration.&lt;/li&gt;
&lt;li&gt;Train classification and regression models using H2O machine learning algorithms.&lt;/li&gt;
&lt;li&gt;Evaluate model performance and make predictions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Agenda&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;About H2O.ai&lt;/li&gt;
&lt;li&gt;H2O machine learning platform &amp;amp; algorithms&lt;/li&gt;
&lt;li&gt;H2O + Python API&lt;/li&gt;
&lt;li&gt;Basic Extract, Transform and Load (ETL) procedures&lt;/li&gt;
&lt;li&gt;Worked examples: classification and regression&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jo-fai Chow</dc:creator><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-30:pydata-berlin-2017/introduction-to-machine-learning-with-h2o-and-python.html</guid><category>tutorial</category></item><item><title>Pandas from the Inside / "Big Pandas"</title><link>http://pyvideo.org/pydata-berlin-2017/pandas-from-the-inside-big-pandas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is great for data analysis in Python. It promises intuitive DataFrames from R; speed like numpy; groupby like SQL. But there are plenty of pitfalls. This tutorial looks inside pandas to see how DataFrames actually work when building, indexing and grouping tables. You will learn how to write fast, efficient code, and how to scale up to bigger problems with libraries like Dask.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pandas is great way to quickly get started with data analysis in Python: intuitive DataFrames from R; fast numpy arrays under the hood; groupby just like SQL. But this familiarity is deceptive and both new and experienced pandas users often get stuck on things they feel should be simple.&lt;/p&gt;
&lt;p&gt;In the first part of this tutorial, we look inside pandas to see how DataFrames actually work when building, indexing and grouping tables. We will learn which pandas operations are fast and why, and how to avoid common performance pitfalls. By the end of the tutorial, you will develop a strong and reliable intuition about using pandas effectively.&lt;/p&gt;
&lt;p&gt;In the second part, we switch gear to bigger problems where our data sets can't fit in local memory. First we see how pandas behaves as we start to hit memory limits. Then we look at Dask, whose distributed/deferred DataFrames are a near drop-in replacement for pandas. Then we come back to pure pandas and look for ways to manage bigger datasets with clever data storage,.&lt;/p&gt;
&lt;p&gt;During this tutorial, you are welcome to follow along on your laptop with the sample data sets and example code in a Jupyter notebook. These will be made available on GitHub here just before the tutorial. The code targets Python 3 and the latest pandas/dask release.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephen Simmons</dc:creator><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-30:pydata-berlin-2017/pandas-from-the-inside-big-pandas.html</guid><category>tutorial</category></item><item><title>Topic Modelling (and more) with NLP framework Gensim</title><link>http://pyvideo.org/pydata-berlin-2017/topic-modelling-and-more-with-nlp-framework-gensim.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/bhargavvader/personal/tree/master/notebooks/text_analysis_tutorial"&gt;https://github.com/bhargavvader/personal/tree/master/notebooks/text_analysis_tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tutorial will guide you through the process of analysing your textual data through topic modelling - from finding and cleaning your data, pre-processing using spaCy, applying topic modelling algorithms using gensim - before moving on to more advanced textual analysis techniques.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Topic Modelling is a great way to analyse completely unstructured textual data - and with the python NLP framework Gensim, it's very, very easy to do this. The purpose of this tutorial is to guide one through the whole process of topic modelling - right from pre-processing your raw textual data, creating your topic models, evaluating the topic models, to visualising them. Advanced topic modelling techniques will also be covered in this tutorial, such as Dynamic Topic Modelling, Topic Coherence, Document Word Coloring, and LSI/HDP.&lt;/p&gt;
&lt;p&gt;The python packages used during the tutorial will be spaCy (for pre-processing), gensim (for topic modelling), and pyLDAvis (for visualisation). The interface for the tutorial will be an Jupyter notebook.&lt;/p&gt;
&lt;p&gt;The takeaway from the tutorial would be the participants ability to get their hands dirty with analysing their own textual data, through the entire lifecycle of cleaning raw data to visualising topics.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bhargav Srinivasa Desikan</dc:creator><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-30:pydata-berlin-2017/topic-modelling-and-more-with-nlp-framework-gensim.html</guid><category>tutorial</category></item><item><title>From Novice to Data Ninja</title><link>http://pyvideo.org/pydata-seattle-2017/from-novice-to-data-ninja.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial aims to introduce beginner Python learners to the diverse types of data a data scientist may face at work: time series, images, videos, text, graphs, geospatial data. In two hours participants will become comfortable handling each type of data and extracting interesting information from it. Participants will also learn tips and tricks how to handle large datasets of each kind.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Data are all around us and come in all sizes and shapes. As a beginner Python learner you often dream to become a master of all data types and handle them with ease: but soon you get intimidated by piles of libraries and unfamiliar jargon surrounding specific data formats and processing tools. The good news is that once you overcome the initial hurdles, you realize that you can analyze these diverse datasets using similar methodology.&lt;/p&gt;
&lt;p&gt;The goal of this tutorial is to provide participants with hands-on experience working with diverse types of data: text, sound, video, graphs, GIS. Each data module will include an example with a small dataset to introduce the properties of the data type, and one with a larger dataset to equip the learners with tools to handle the vast data in the wild. Throughout the tutorial we will illustrate how same data mining techniques can be used on different types of data.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/valentina-s/Novice2DataNinja"&gt;https://github.com/valentina-s/Novice2DataNinja&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valentina Staneva</dc:creator><pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-06:pydata-seattle-2017/from-novice-to-data-ninja.html</guid><category>tutorial</category></item><item><title>Network Science and Statistics - Fundamentals and Applications</title><link>http://pyvideo.org/scipy-2017/network-science-and-statistics-fundamentals-and-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are audio issues with this video that cannot be fixed. We recommend listening to the tutorial without headphones to minimize the buzzing sound.
Tutorial information may be found at &lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493423/"&gt;https://scipy2017.scipy.org/ehome/220975/493423/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this tutorial, we will cover the fundamentals and practical aspects of network science and how it can be used to solve problems in science and society! Outline:&lt;/p&gt;
&lt;p&gt;Part 1: Introduction (30 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Networks of all kinds: biological, transportation.&lt;/li&gt;
&lt;li&gt;Representation of networks, NetworkX data structures&lt;/li&gt;
&lt;li&gt;Basic quick-and-dirty visualizations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 2: Hubs and Paths (40 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finding important nodes; applications&lt;/li&gt;
&lt;li&gt;Pathfinding algorithms and their applications&lt;/li&gt;
&lt;li&gt;Hands-on: implementing path-finding algorithms&lt;/li&gt;
&lt;li&gt;Visualize degree and betweenness centrality distributions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 3: Cliques, Triangles &amp;amp; Structures (40 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Definition of cliques&lt;/li&gt;
&lt;li&gt;Triangles as the simplest complex clique, applications&lt;/li&gt;
&lt;li&gt;Using path-finding algorithms to find structures in a graph.&lt;/li&gt;
&lt;li&gt;Open triangles as recommender systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 4: Bipartite Graphs (30 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Definition of bipartite graphs, applications&lt;/li&gt;
&lt;li&gt;Constructing bipartite graphs in NetworkX.&lt;/li&gt;
&lt;li&gt;Summary statistics of bipartite graphs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 5: Advanced Network Visualizations &amp;amp; Concepts (40 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Basic concepts in rational layouts: node positioning, node colouring.&lt;/li&gt;
&lt;li&gt;Plots: Circos, Arc, Hive, Matrix, Flow plots&lt;/li&gt;
&lt;li&gt;Handling large graphs using matrices.&lt;/li&gt;
&lt;li&gt;Graph diffs and their application to analysis of time-variant, evolving graphs.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Ma</dc:creator><pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-05:scipy-2017/network-science-and-statistics-fundamentals-and-applications.html</guid><category>tutorial</category></item><item><title>Interactive Data Visualization with HoloViews &amp; Bokeh</title><link>http://pyvideo.org/scipy-2017/interactive-data-visualization-with-holoviews-bokeh.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are audio issues with this video that cannot be fixed. We recommend listening to the tutorial without headphones to minimize the buzzing sound.
Tutorial information may be found at &lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493423/"&gt;https://scipy2017.scipy.org/ehome/220975/493423/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visualization represents a major bottleneck in scientific research, engineering, data science, and data analytics. The tools in the Python scientific ecosystem make it very simple to do many of the tasks required, but building visualizations to help understand complex patterns and relationships in your data still typically involves a large amount of custom coding for every new type of plot. Writing long and detailed scripts for plotting slows down the process of exploration and reporting, while the difficulty involved means that many important observations and discoveries are missed due to inadequate visualizations. The complexity of the resulting plotting code makes it difficult to rapidly build sophisticated, interactive visualizations that can quickly reveal the underlying structure of the data, and once such complex plotting scripts have been created they can be a major impediment to future understanding, reproduction, and modification of the research process.&lt;/p&gt;
&lt;p&gt;In this tutorial, you will learn how to approach the problem of interactive visualization declaratively. Using the HoloViews library, you can annotate your data and store it in general-purpose containers that will be instantly visualizable. The declarative objects in HoloViews wrap your data to make it incredibly easy to visualize how different sets of data relate to each other, using subfigures, animations, interactive widgets and custom interactions. This flexibility has made HoloViews the chosen future replacement for the high-level Bokeh Charts API and works particularly well with IPython/Jupyter notebooks, where you can immediately see the output from selecting, combining, slicing, or sampling these objects. Each of these operations generates a different type of visualization, that can be flexibly extended even to complex dashboards deployed using the Bokeh server or Jupyter dashboards.&lt;/p&gt;
&lt;p&gt;The core design principle of HoloViews is to make it simple to create complex plot layouts and interactivity by applying compositional operations to a small number of elements and containers. Since HoloViews separates the declaration of the data from the precise visual details of the plotting code, the same HoloViews objects can be rendered using matplotlib for publication-quality plots, or bokeh for interactive use. Overall, this means the user can focus on &lt;strong&gt;what&lt;/strong&gt; to plot before worrying about &lt;strong&gt;how&lt;/strong&gt; exactly it should be displayed, providing a huge boost in productivity.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Luc Stevens</dc:creator><pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-04:scipy-2017/interactive-data-visualization-with-holoviews-bokeh.html</guid><category>tutorial</category><category>HoloViews</category><category>Bokeh</category></item><item><title>Introduction to Numerical Computing with NumPy</title><link>http://pyvideo.org/scipy-2017/introduction-to-numerical-computing-with-numpy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tutorial materials found here: &lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493423/"&gt;https://scipy2017.scipy.org/ehome/220975/493423/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NumPy provides Python with a powerful array processing library and an elegant syntax that is well suited to expressing computational algorithms clearly and efficiently. We'll introduce basic array syntax and array indexing, review some of the available mathematical functions in numpy, and discuss how to write your own routines. Along the way, we'll learn just enough of matplotlib to display results from our examples.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dillon Niederhut</dc:creator><pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-13:scipy-2017/introduction-to-numerical-computing-with-numpy.html</guid><category>tutorial</category></item><item><title>Parallel Data Analysis in Python</title><link>http://pyvideo.org/scipy-2017/parallel-data-analysis-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tutorial materials found here: &lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493423/"&gt;https://scipy2017.scipy.org/ehome/220975/493423/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tutorial teaches the fundamentals of parallel programming in Python. It focuses on covering a few programming techniques rather than diving into one framework or tool in particular.&lt;/p&gt;
&lt;p&gt;Student Goals:&lt;/p&gt;
&lt;p&gt;Students will walk away with a high-level understanding of both parallel problems and how to reason about parallel computing frameworks. They will also walk away with hands-on experience using a variety of frameworks easily accessible from Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthew Rocklin</dc:creator><pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-13:scipy-2017/parallel-data-analysis-in-python.html</guid><category>tutorial</category></item><item><title>Parallelizing Scientific Python with Dask</title><link>http://pyvideo.org/scipy-2017/parallelizing-scientific-python-with-dask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tutorial materials found here: &lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493423/"&gt;https://scipy2017.scipy.org/ehome/220975/493423/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dask is a flexible tool for parallelizing Python code on a single machine or across a cluster. We can think of dask at a high and a low level:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;High level collections: Dask provides high-level Array, Bag, and DataFrame collections that mimic NumPy, lists, and Pandas but can operate in parallel on datasets that don't fit into main memory. Dask's high-level collections are alternatives to NumPy and Pandas for large datasets.&lt;/li&gt;
&lt;li&gt;Low Level schedulers: Dask provides dynamic task schedulers that execute task graphs in parallel. These execution engines power the high-level collections mentioned above but can also power custom, user-defined workloads. These schedulers are low-latency (around 200 us) and work hard to run computations in a small memory footprint. Dask's schedulers are an alternative to direct use of threading or multiprocessing libraries in complex cases or other task scheduling systems like Luigi or IPython parallel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Different users operate at different levels but it is useful to understand both. This tutorial will cover both the high-level use of dask.array and dask.dataframe and low-level use of dask graphs and schedulers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Crist</dc:creator><pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-13:scipy-2017/parallelizing-scientific-python-with-dask.html</guid><category>tutorial</category><category>dask</category></item><item><title>scikit image - Image Processing for Python</title><link>http://pyvideo.org/scipy-2017/scikit-image-image-processing-for-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tutorial materials found here: &lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493423/"&gt;https://scipy2017.scipy.org/ehome/220975/493423/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;scikit-image is a collection of image processing algorithms for the
SciPy ecosystem. It has a Pythonic API, is well documented, and aims
to provide researchers and practitioners with well-tested, fundamental
building blocks for rapidly constructing sophisticated image
processing pipelines.&lt;/p&gt;
&lt;p&gt;In this tutorial, we provide an interactive overview of the library,
where participants have the opportunity to try their hand at various
image processing challenges.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stéfan van der Walt</dc:creator><pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-13:scipy-2017/scikit-image-image-processing-for-python.html</guid><category>scikit image</category><category>tutorial</category></item><item><title>Signal Processing and Communications Hands On Using scikit dsp comm</title><link>http://pyvideo.org/scipy-2017/signal-processing-and-communications-hands-on-using-scikit-dsp-comm.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tutorial materials found here: &lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493423/"&gt;https://scipy2017.scipy.org/ehome/220975/493423/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this tutorial I intend to start with a basic review of discrete-time signals and systems using a module I developed for my book Signals and Systems for Dummies. Once a basic foundation is provided, all using hands-on Python code examples in a Jupyter notebook, I will move to more advanced topics relative to statistical signal processing, digital communications and software defined radio. Digital communication transmitter and receiver simulations will be explored using Python code modules found in the newly posted scikit-dsp-comm as well as data acquisition code used in conjunction with a popular $20 software-defined radio USB dongle (RTL-SDR).
The capstone portion of the tutorial will have the students write code to recover FM stereo radio broadcasts from a raw complex signal file obtained from the output of a popular $20 software defined radio module (the RTLSDR).  Hardware will be provided for small groups to work together.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Wic</dc:creator><pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-13:scipy-2017/signal-processing-and-communications-hands-on-using-scikit-dsp-comm.html</guid><category>signal processing</category><category>software defined radio</category><category>tutorial</category></item><item><title>Automatic Code Generation with SymPy</title><link>http://pyvideo.org/scipy-2017/automatic-code-generation-with-sympy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tutorial materials found here: &lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493423/"&gt;https://scipy2017.scipy.org/ehome/220975/493423/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tutorial will introduce code generation concepts using the SymPy library. SymPy is a pure Python library for symbolic mathematics. Code generation refers to the act of converting a SymPy symbolic expression into equivalent code in some language. This allows one to use SymPy to symbolically model a problem, and generate fast numerical code for specific platforms that executes that model. This is a powerful tool that is useful to scientists in many domains. Code generation allows users to speed up existing code, to deal only with the high level mathematics of a problem, avoids mathematical errors and typos, makes it possible to deal with expressions that would otherwise be too large to write by hand, and opens possibilities to perform automatic mathematical optimizations of expressions.&lt;/p&gt;
&lt;p&gt;SymPy supports generating code for C, C++, Fortran, Matlab/Octave, Python, Cython, Julia, Javascript, LLVM, Rust, Haskell, Mathematica, Tensorflow, and Theano, and can easily be extended to other languages. SymPy’s code generation is used by libraries such as PyDy, pyodesys, sympybotics, pycalphad, and many other programs.&lt;/p&gt;
&lt;p&gt;Learning objectives&lt;/p&gt;
&lt;p&gt;Attendees will be able to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;write SymPy expressions describing mathematical functions and identify the function arguments and outputs.&lt;/li&gt;
&lt;li&gt;use the SymPy code printers to transform SymPy expressions representing common domain specific functions into multiple output languages.&lt;/li&gt;
&lt;li&gt;use the SymPy code generation routines to output compilable C code and use Cython to access these functions in Python.&lt;/li&gt;
&lt;li&gt;generate custom vectorized functions with the three SymPy functions: lambdify, ufuncify, and autowrap.&lt;/li&gt;
&lt;li&gt;create both custom code printers that make use of specialized C libraries and common subexpression elimination (CSE).&lt;/li&gt;
&lt;li&gt;subclass the core SymPy printers and create a printer for a custom language.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Moore</dc:creator><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-12:scipy-2017/automatic-code-generation-with-sympy.html</guid><category>tutorial</category><category>sympy</category></item><item><title>Cython for Data, Scientists, and Data Scientists</title><link>http://pyvideo.org/scipy-2017/cython-for-data-scientists-and-data-scientists.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tutorial materials found here: &lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493423/"&gt;https://scipy2017.scipy.org/ehome/220975/493423/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cython is a foundational technology behind many packages you use everyday, including NumPy, SciPy, Pandas, Scikit-Learn, Scikit-Image, PyTables, and h5py. Developers, data scientists, and researchers use Cython to accelerate Python, access NumPy efficiently at the C level, and interface Python with C or C++. Cython's expressivity, its stability and maturity, and its gradual typing approach make it a uniquely flexible tool that has become a critical component for many projects.&lt;/p&gt;
&lt;p&gt;This tutorial will be fast paced, and is geared towards data scientists and Python users looking to take their Python performance to the next level. Basic familiarity with C or C++ is assumed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dillon Niederhut</dc:creator><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-12:scipy-2017/cython-for-data-scientists-and-data-scientists.html</guid><category>tutorial</category><category>cython</category></item><item><title>HDF5 take 2 - h5py &amp; PyTables</title><link>http://pyvideo.org/scipy-2017/hdf5-take-2-h5py-pytables.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tutorial materials found here: &lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493423/"&gt;https://scipy2017.scipy.org/ehome/220975/493423/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HDF5 is a hierarchical, binary database format that has become the de facto standard for scientific computing. While the specification may be used in a relatively simple way (persistence of static arrays) it also supports several high-level features that prove invaluable. These include chunking, ragged data, extensible data, parallel I/O, compression, complex selection, and in-core calculations. Moreover, HDF5 bindings exist for almost every language - including two Python libraries (PyTables and h5py). This tutorial will cover HDF5 itself through the lens of both h5py and PyTables and will show how to use them in order to persist NumPy and pandas containers.&lt;/p&gt;
&lt;p&gt;This tutorial will discuss tools, strategies, and hacks for really squeezing every ounce of performance out of HDF5 in new or existing projects. It will also go over fundamental limitations in the specification and provide creative and subtle strategies for getting around them. We will also see how pandas can use HDF5 via its HDFStore module. Overall, this tutorial will show how HDF5 plays nicely with all parts of an application making the code and data both faster and smaller.     Knowledge of Python, NumPy, pandas, C or C++, and basic HDF5 is recommended but not required.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Kooij</dc:creator><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-12:scipy-2017/hdf5-take-2-h5py-pytables.html</guid><category>tutorial</category></item><item><title>Matplotlib Plot Tutorial: Histograms, Scatter Plots &amp; Legend</title><link>http://pyvideo.org/datacamp/Matplotlib-Plot-Tutorial-For-Beginners.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Matplotlib makes it easy to create meaningful and insightful plots. In this beginner video, you will learn how to build various types of data visualizations such as histograms, scatter plots and line plots. You will also see how to customize them to make them more visually appealing and interpretable.&lt;/p&gt;
&lt;p&gt;Want to do the corresponding exercises? Go to our &lt;cite&gt;Python For Data Science Tutorial &amp;lt;https://www.datacamp.com/courses/intro-to-python-for-data-science&amp;gt;&lt;/cite&gt; where you can do them for free.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Filip Schouwenaars</dc:creator><pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-01:datacamp/Matplotlib-Plot-Tutorial-For-Beginners.html</guid><category>Matplotlib</category><category>data science</category><category>data visualization</category><category>tutorial</category><category>DataCamp</category></item><item><title>Julia Tutorial</title><link>http://pyvideo.org/pydata-dc-2016/julia-tutorial.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Github: &lt;a class="reference external" href="https://github.com/cc7768/PyDataDC_julia"&gt;https://github.com/cc7768/PyDataDC_julia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Julia is a programming language oriented around the just in time (JIT) compiler technology. This tutorial will be an introduction to Julia and the core concepts that make it a good choice for certain types of problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chase Coleman</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pydata-dc-2016/julia-tutorial.html</guid><category>julia</category><category>tutorial</category></item><item><title>How do I apply a function to a pandas Series or DataFrame?</title><link>http://pyvideo.org/data-school/pandas-30-apply-function.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever struggled to figure out the differences between apply, map, and applymap? In this video, I'll explain when you should use each of these methods and demonstrate a few common use cases. Watch the end of the video for three important announcements!&lt;/p&gt;
&lt;p&gt;This is video 30 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-23:data-school/pandas-30-apply-function.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>NumPy</category></item><item><title>How do I create a pandas DataFrame from another object?</title><link>http://pyvideo.org/data-school/pandas-29-dummy-dataframe.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever needed to create a DataFrame of &amp;quot;dummy&amp;quot; data, but without reading from a file? In this video, I'll demonstrate how to create a DataFrame from a dictionary, a list, and a NumPy array. I'll also show you how to create a new Series and attach it to the DataFrame.&lt;/p&gt;
&lt;p&gt;This is video 29 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 16 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-16:data-school/pandas-29-dummy-dataframe.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>NumPy</category></item><item><title>How do I change display options in pandas?</title><link>http://pyvideo.org/data-school/pandas-28-customize-display.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted to change the way your DataFrame is displayed? Perhaps you needed to see more rows or columns, or modify the formatting of numbers? In this video, I'll demonstrate how to change the settings for five common display options in pandas.&lt;/p&gt;
&lt;p&gt;This is video 28 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 09 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-09:data-school/pandas-28-customize-display.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>How do I avoid a SettingWithCopyWarning in pandas?</title><link>http://pyvideo.org/data-school/pandas-27-setting-with-copy-warning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you've been using pandas for a while, you've likely encountered a SettingWithCopyWarning. The proper response is to modify your code appropriately, not to turn off the warning! In this video, I'll show you two common scenarios in which this warning arises, explain why it's occurring, and then demonstrate how to address it.&lt;/p&gt;
&lt;p&gt;This is video 27 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 02 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-02:data-school/pandas-27-setting-with-copy-warning.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>missing data</category></item><item><title>How do I find and remove duplicate rows in pandas?</title><link>http://pyvideo.org/data-school/pandas-26-duplicate-data.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;During the data cleaning process, you will often need to figure out whether you have duplicate data, and if so, how to deal with it. In this video, I'll demonstrate the two key methods for finding and removing duplicate rows, as well as how to modify their behavior to suit your specific needs.&lt;/p&gt;
&lt;p&gt;This is video 26 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-26:data-school/pandas-26-duplicate-data.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>duplicate data</category></item><item><title>How do I work with dates and times in pandas?</title><link>http://pyvideo.org/data-school/pandas-25-dates-and-times.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Let's say that you have dates and times in your DataFrame and you want to analyze your data by minute, month, or year. What should you do? In this video, I'll demonstrate how you can convert your data to &amp;quot;datetime&amp;quot; format, enabling you to access a ton of convenient attributes and perform datetime comparisons and mathematical operations.&lt;/p&gt;
&lt;p&gt;This is video 25 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 19 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-19:data-school/pandas-25-dates-and-times.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>data visualization</category></item><item><title>How do I create dummy variables in pandas?</title><link>http://pyvideo.org/data-school/pandas-24-dummy-variables.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you want to include a categorical feature in your machine learning model, one common solution is to create dummy variables. In this video, I'll demonstrate three different ways you can create dummy variables from your existing DataFrame columns. I'll also show you a trick for simplifying your code that was introduced in pandas 0.18.&lt;/p&gt;
&lt;p&gt;This is video 24 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 12 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-12:data-school/pandas-24-dummy-variables.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>machine learning</category></item><item><title>More of your pandas questions answered!</title><link>http://pyvideo.org/data-school/pandas-23-viewer-questions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this video, I'm answering a few of the pandas questions I've received in the YouTube comments: Could you explain how to read the pandas documentation? What is the difference between ufo.isnull() and pd.isnull(ufo)? Why are DataFrame slices inclusive when using .loc, but exclusive when using .iloc? How do I randomly sample rows from a DataFrame?&lt;/p&gt;
&lt;p&gt;This is video 23 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 05 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-05:data-school/pandas-23-viewer-questions.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>reproducibility</category></item><item><title>How do I use pandas with scikit-learn to create Kaggle submissions?</title><link>http://pyvideo.org/data-school/pandas-22-prepare-for-machine-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you been using scikit-learn for machine learning, and wondering whether pandas could help you to prepare your data and export your predictions? In this video, I'll demonstrate the simplest way to integrate pandas into your machine learning workflow, and will create a submission for Kaggle's Titanic competition in just a few lines of code!&lt;/p&gt;
&lt;p&gt;This is video 22 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-28:data-school/pandas-22-prepare-for-machine-learning.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>scikit-learn</category><category>machine learning</category></item><item><title>How do I make my pandas DataFrame smaller and faster?</title><link>http://pyvideo.org/data-school/pandas-21-reduce-dataframe-size.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you working with a large dataset in pandas, and wondering if you can reduce its memory footprint or improve its efficiency? In this video, I'll show you how to do exactly that in one line of code using the &amp;quot;category&amp;quot; data type, introduced in pandas 0.15. I'll explain how it works, and how to know when you shouldn't use it.&lt;/p&gt;
&lt;p&gt;This is video 21 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 21 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-21:data-school/pandas-21-reduce-dataframe-size.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>When should I use the "inplace" parameter in pandas?</title><link>http://pyvideo.org/data-school/pandas-20-inplace-parameter.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We've used the &amp;quot;inplace&amp;quot; parameter many times during this video series, but what exactly does it do, and when should you use it? In this video, I'll explain how &amp;quot;inplace&amp;quot; affects methods such as &amp;quot;drop&amp;quot; and &amp;quot;dropna&amp;quot;, and why it is always False by default.&lt;/p&gt;
&lt;p&gt;This is video 20 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-14:data-school/pandas-20-inplace-parameter.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>missing data</category></item><item><title>How do I select multiple rows and columns from a pandas DataFrame?</title><link>http://pyvideo.org/data-school/pandas-19-select-dataframe-rows-and-columns.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever been confused about the &amp;quot;right&amp;quot; way to select rows and columns from a DataFrame? pandas gives you an incredible number of options for doing so, but in this video, I'll outline the current best practices for row and column selection using the loc, iloc, and ix methods.&lt;/p&gt;
&lt;p&gt;This is video 19 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 07 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-07:data-school/pandas-19-select-dataframe-rows-and-columns.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>What do I need to know about the pandas index? (Part 2)</title><link>http://pyvideo.org/data-school/pandas-18-index-part-2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In part two of our discussion of the index, we'll switch our focus from the DataFrame index to the Series index. After discussing index-based selection and sorting, I'll demonstrate how automatic index alignment during mathematical operations and concatenation enables us to easily work with incomplete data in pandas.&lt;/p&gt;
&lt;p&gt;This is video 18 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-02:data-school/pandas-18-index-part-2.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>missing data</category></item><item><title>What do I need to know about the pandas index? (Part 1)</title><link>http://pyvideo.org/data-school/pandas-17-index-part-1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The DataFrame index is core to the functionality of pandas, yet it's confusing to many users. In this video, I'll explain what the index is used for and why you might want to store your data in the index. I'll also demonstrate how to set and reset the index, and show how that affects the DataFrame's shape and contents.&lt;/p&gt;
&lt;p&gt;This is video 17 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-31:data-school/pandas-17-index-part-1.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>How do I handle missing values in pandas?</title><link>http://pyvideo.org/data-school/pandas-16-missing-values.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most datasets contain &amp;quot;missing values&amp;quot;, meaning that the data is incomplete. Deciding how to handle missing values can be challenging! In this video, I'll cover all of the basics: how missing values are represented in pandas, how to locate them, and options for how to drop them or fill them in.&lt;/p&gt;
&lt;p&gt;This is video 16 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Thu, 26 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-26:data-school/pandas-16-missing-values.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>missing data</category></item><item><title>How do I explore a pandas Series?</title><link>http://pyvideo.org/data-school/pandas-15-explore-series.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you start working with a new dataset, how should you go about exploring it? In this video, I'll demonstrate some of the basic tools in pandas for exploring both numeric and non-numeric data. I'll also show you how to create simple visualizations in a single line of code!&lt;/p&gt;
&lt;p&gt;This is video 15 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-24:data-school/pandas-15-explore-series.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>data visualization</category></item><item><title>When should I use a "groupby" in pandas?</title><link>http://pyvideo.org/data-school/pandas-14-analyze-data-by-category.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The pandas &amp;quot;groupby&amp;quot; method allows you to split a DataFrame into groups, apply a function to each group independently, and then combine the results back together. This is called the &amp;quot;split-apply-combine&amp;quot; pattern, and is a powerful tool for analyzing data across different categories. In this video, I'll explain when you should use a groupby and then demonstrate its flexibility using four different examples.&lt;/p&gt;
&lt;p&gt;This is video 14 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Thu, 19 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-19:data-school/pandas-14-analyze-data-by-category.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>data visualization</category></item><item><title>How do I change the data type of a pandas Series?</title><link>http://pyvideo.org/data-school/pandas-13-change-data-type-of-series.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever tried to do math with a pandas Series that you thought was numeric, but it turned out that your numbers were stored as strings? In this video, I'll demonstrate two different ways to change the data type of a Series so that you can fix incorrect data types. I'll also show you the easiest way to convert a boolean Series to integers, which is useful for creating dummy/indicator variables for machine learning.&lt;/p&gt;
&lt;p&gt;This is video 13 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-17:data-school/pandas-13-change-data-type-of-series.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>How do I use string methods in pandas?</title><link>http://pyvideo.org/data-school/pandas-12-string-methods.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pandas includes powerful string manipulation capabilities that you can easily apply to any Series of strings. In this video, I'll show you how to access string methods in pandas (along with a few examples), and then end with two bonus tips to help you maximize your efficiency.&lt;/p&gt;
&lt;p&gt;This is video 12 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-12:data-school/pandas-12-string-methods.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>regular expressions</category><category>string processing</category></item><item><title>How do I use the "axis" parameter in pandas?</title><link>http://pyvideo.org/data-school/pandas-11-dataframe-axis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When performing operations on a pandas DataFrame, such as dropping columns or calculating row means, it is often necessary to specify the &amp;quot;axis&amp;quot;. But what exactly is an axis? In this video, I'll help you to build a mental model for understanding the axis parameter so that you will know when and how to use it.&lt;/p&gt;
&lt;p&gt;This is video 11 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 10 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-10:data-school/pandas-11-dataframe-axis.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>Your pandas questions answered!</title><link>http://pyvideo.org/data-school/pandas-10-viewer-questions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this video, I'm answering a few of the pandas questions I've received in the YouTube comments: When reading from a file, how do I read in only a subset of the columns or rows? How do I iterate through a Series or a DataFrame? How do I drop all non-numeric columns from a DataFrame? How do I know whether I should pass an argument as a string or a list?&lt;/p&gt;
&lt;p&gt;This is video 10 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-05:data-school/pandas-10-viewer-questions.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>How do I apply multiple filter criteria to a pandas DataFrame?</title><link>http://pyvideo.org/data-school/pandas-09-multiple-filter-criteria.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Let's say that you want to filter the rows of a DataFrame by multiple conditions. In this video, I'll demonstrate how to do this using two different logical operators. I'll also explain the special rules in pandas for combining filter criteria, and end with a trick for simplifying chained conditions!&lt;/p&gt;
&lt;p&gt;This is video 9 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-03:data-school/pandas-09-multiple-filter-criteria.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>How do I filter rows of a pandas DataFrame by column value?</title><link>http://pyvideo.org/data-school/pandas-08-filter-dataframe-rows.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Let's say that you only want to display the rows of a DataFrame which have a certain column value. How would you do it? pandas makes it easy, but the notation can be confusing and thus difficult to remember. In this video, I'll work up to the solution step-by-step using regular Python code so that you can truly understand the logic behind pandas filtering notation.&lt;/p&gt;
&lt;p&gt;This is video 8 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-04-28:data-school/pandas-08-filter-dataframe-rows.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>How do I sort a pandas DataFrame or a Series?</title><link>http://pyvideo.org/data-school/pandas-07-sort-dataframe-or-series.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pandas allows you to sort a DataFrame by one of its columns (known as a &amp;quot;Series&amp;quot;), and also allows you to sort a Series alone. The sorting API changed in pandas version 0.17, so in this video, I'll demonstrate both the &amp;quot;old way&amp;quot; and the &amp;quot;new way&amp;quot; to sort. I'll also show you how to sort a DataFrame by multiple columns at once!&lt;/p&gt;
&lt;p&gt;This is video 7 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-04-26:data-school/pandas-07-sort-dataframe-or-series.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>How do I remove columns from a pandas DataFrame?</title><link>http://pyvideo.org/data-school/pandas-06-remove-dataframe-column.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you have DataFrame columns that you're never going to use, you may want to remove them entirely in order to focus on the columns that you do use. In this video, I'll show you how to remove columns (and rows), and will briefly explain the meaning of the &amp;quot;axis&amp;quot; and &amp;quot;inplace&amp;quot; parameters.&lt;/p&gt;
&lt;p&gt;This is video 6 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Thu, 21 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-04-21:data-school/pandas-06-remove-dataframe-column.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>How do I rename columns in a pandas DataFrame?</title><link>http://pyvideo.org/data-school/pandas-05-rename-dataframe-column.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You will often want to rename the columns of a DataFrame so that their names are descriptive, easy to type, and don't contain any spaces. In this video, I'll demonstrate three different strategies for renaming columns so that you can choose the best strategy to fit your particular situation.&lt;/p&gt;
&lt;p&gt;This is video 5 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 19 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-04-19:data-school/pandas-05-rename-dataframe-column.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>Why do some pandas commands end with parentheses (and others don't)?</title><link>http://pyvideo.org/data-school/pandas-04-methods-and-attributes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To access most of the functionality in pandas, you have to call the methods and attributes of DataFrame and Series objects. In this video, I'll discuss some common methods and attributes, and show you how to tell the difference between them. (Hint: It's all about the parentheses!)&lt;/p&gt;
&lt;p&gt;This is video 4 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-04-14:data-school/pandas-04-methods-and-attributes.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>How do I select a pandas Series from a DataFrame?</title><link>http://pyvideo.org/data-school/pandas-03-select-series-from-dataframe.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DataFrames and Series are the two main object types in pandas for data storage: a DataFrame is like a table, and each column of the table is called a Series. You will often select a Series in order to analyze or manipulate it. In this video, I'll show you how to select a Series using &amp;quot;bracket notation&amp;quot; and &amp;quot;dot notation&amp;quot;, and will discuss the limitations of dot notation. I'll also demonstrate how to create a new Series in a DataFrame.&lt;/p&gt;
&lt;p&gt;This is video 3 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-04-12:data-school/pandas-03-select-series-from-dataframe.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>What is pandas? (Introduction to the Q&amp;A series)</title><link>http://pyvideo.org/data-school/pandas-01-introduction.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pandas is a full-featured Python library for data analysis, manipulation, and visualization. This video series is for anyone who wants to work with data in Python, regardless of whether you are brand new to pandas or have some experience.&lt;/p&gt;
&lt;p&gt;This is video 1 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-04-07:data-school/pandas-01-introduction.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category></item><item><title>How do I read a tabular data file into pandas?</title><link>http://pyvideo.org/data-school/pandas-02-read-tabular-data-file.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Tabular data&amp;quot; is just data that has been formatted as a table, with rows and columns (like a spreadsheet). You can easily read a tabular data file into pandas, even directly from a URL! In this video, I'll walk you through how to do that, including how to modify some of the default arguments of the read_table function to solve common problems.&lt;/p&gt;
&lt;p&gt;This is video 2 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-04-07:data-school/pandas-02-read-tabular-data-file.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>csv</category></item><item><title>How to evaluate a classifier in scikit-learn</title><link>http://pyvideo.org/data-school/scikit-learn-09-evaluating-classification-models.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this video, you'll learn how to properly evaluate a classification model using a variety of common tools and metrics, as well as how to adjust the performance of a classifier to best match your business objectives. I'll start by demonstrating the weaknesses of classification accuracy as an evaluation metric. I'll then discuss the confusion matrix, the ROC curve and AUC, and metrics such as sensitivity, specificity, and precision. By the end of the video, you will have a solid foundation for intelligently evaluating your own classification model.&lt;/p&gt;
&lt;p&gt;This is the ninth video in the series, &lt;a class="reference external" href="http://www.dataschool.io/machine-learning-with-scikit-learn/"&gt;Introduction to machine learning with scikit-learn&lt;/a&gt;. The notebook and resources shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/scikit-learn-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Fri, 23 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-23:data-school/scikit-learn-09-evaluating-classification-models.html</guid><category>machine learning</category><category>data science</category><category>scikit-learn</category><category>tutorial</category><category>Data School</category><category>model evaluation</category><category>classification</category><category>confusion matrix</category><category>ROC curve</category><category>AUC</category></item><item><title>How to find the best model parameters in scikit-learn</title><link>http://pyvideo.org/data-school/scikit-learn-08-parameter-tuning-with-grid-search.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this video, you'll learn how to efficiently search for the optimal tuning parameters (or &amp;quot;hyperparameters&amp;quot;) for your machine learning model in order to maximize its performance. I'll start by demonstrating an exhaustive &amp;quot;grid search&amp;quot; process using scikit-learn's GridSearchCV class, and then I'll compare it with RandomizedSearchCV, which can often achieve similar results in far less time.&lt;/p&gt;
&lt;p&gt;This is the eighth video in the series, &lt;a class="reference external" href="http://www.dataschool.io/machine-learning-with-scikit-learn/"&gt;Introduction to machine learning with scikit-learn&lt;/a&gt;. The notebook and resources shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/scikit-learn-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-15:data-school/scikit-learn-08-parameter-tuning-with-grid-search.html</guid><category>machine learning</category><category>data science</category><category>scikit-learn</category><category>tutorial</category><category>Data School</category><category>cross-validation</category><category>model evaluation</category><category>parameter tuning</category><category>grid search</category></item><item><title>Selecting the best model in scikit-learn using cross-validation</title><link>http://pyvideo.org/data-school/scikit-learn-07-model-evaluation-with-cross-validation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this video, we'll learn about K-fold cross-validation and how it can be used for selecting optimal tuning parameters, choosing between models, and selecting features. We'll compare cross-validation with the train/test split procedure, and we'll also discuss some variations of cross-validation that can result in more accurate estimates of model performance.&lt;/p&gt;
&lt;p&gt;This is the seventh video in the series, &lt;a class="reference external" href="http://www.dataschool.io/machine-learning-with-scikit-learn/"&gt;Introduction to machine learning with scikit-learn&lt;/a&gt;. The notebook and resources shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/scikit-learn-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Sun, 28 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-06-28:data-school/scikit-learn-07-model-evaluation-with-cross-validation.html</guid><category>machine learning</category><category>data science</category><category>scikit-learn</category><category>tutorial</category><category>Data School</category><category>cross-validation</category><category>model evaluation</category><category>feature selection</category><category>parameter tuning</category></item><item><title>Data science in Python: pandas, seaborn, scikit-learn</title><link>http://pyvideo.org/data-school/scikit-learn-06-data-science-pipeline.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this video, we'll cover the data science pipeline from data ingestion (with pandas) to data visualization (with seaborn) to machine learning (with scikit-learn). We'll learn how to train and interpret a linear regression model, and then compare three possible evaluation metrics for regression problems. Finally, we'll apply the train/test split procedure to decide which features to include in our model.&lt;/p&gt;
&lt;p&gt;This is the sixth video in the series, &lt;a class="reference external" href="http://www.dataschool.io/machine-learning-with-scikit-learn/"&gt;Introduction to machine learning with scikit-learn&lt;/a&gt;. The notebook and resources shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/scikit-learn-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Thu, 28 May 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-05-28:data-school/scikit-learn-06-data-science-pipeline.html</guid><category>machine learning</category><category>data science</category><category>scikit-learn</category><category>tutorial</category><category>Data School</category><category>pandas</category><category>seaborn</category><category>linear regression</category><category>model evaluation</category><category>feature selection</category><category>visualization</category></item><item><title>Comparing machine learning models in scikit-learn</title><link>http://pyvideo.org/data-school/scikit-learn-05-comparing-machine-learning-models.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We've learned how to train different machine learning models and make predictions, but how do we actually choose which model is &amp;quot;best&amp;quot;? We'll cover the train/test split process for model evaluation, which allows you to avoid &amp;quot;overfitting&amp;quot; by estimating how well a model is likely to perform on new data. We'll use that same process to locate optimal tuning parameters for a KNN model, and then we'll re-train our model so that it's ready to make real predictions.&lt;/p&gt;
&lt;p&gt;This is the fifth video in the series, &lt;a class="reference external" href="http://www.dataschool.io/machine-learning-with-scikit-learn/"&gt;Introduction to machine learning with scikit-learn&lt;/a&gt;. The notebook and resources shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/scikit-learn-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-05-14:data-school/scikit-learn-05-comparing-machine-learning-models.html</guid><category>machine learning</category><category>data science</category><category>scikit-learn</category><category>tutorial</category><category>Data School</category><category>model evaluation</category><category>overfitting</category></item><item><title>Training a machine learning model with scikit-learn</title><link>http://pyvideo.org/data-school/scikit-learn-04-training-a-machine-learning-model.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Now that we're familiar with the famous iris dataset, let's actually use a classification model in scikit-learn to predict the species of an iris! We'll learn how the K-nearest neighbors (KNN) model works, and then walk through the four steps for model training and prediction in scikit-learn. Finally, we'll see how easy it is to try out a different classification model, namely logistic regression.&lt;/p&gt;
&lt;p&gt;This is the fourth video in the series, &lt;a class="reference external" href="http://www.dataschool.io/machine-learning-with-scikit-learn/"&gt;Introduction to machine learning with scikit-learn&lt;/a&gt;. The notebook and resources shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/scikit-learn-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-29:data-school/scikit-learn-04-training-a-machine-learning-model.html</guid><category>machine learning</category><category>data science</category><category>scikit-learn</category><category>tutorial</category><category>Data School</category><category>classification</category><category>KNN</category></item><item><title>Getting started in scikit-learn with the famous iris dataset</title><link>http://pyvideo.org/data-school/scikit-learn-03-getting-started-with-machine-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Now that we've set up Python for machine learning, let's get started by loading an example dataset into scikit-learn! We'll explore the famous &amp;quot;iris&amp;quot; dataset, learn some important machine learning terminology, and discuss the four key requirements for working with data in scikit-learn.&lt;/p&gt;
&lt;p&gt;This is the third video in the series, &lt;a class="reference external" href="http://www.dataschool.io/machine-learning-with-scikit-learn/"&gt;Introduction to machine learning with scikit-learn&lt;/a&gt;. The notebook and resources shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/scikit-learn-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-21:data-school/scikit-learn-03-getting-started-with-machine-learning.html</guid><category>machine learning</category><category>data science</category><category>scikit-learn</category><category>tutorial</category><category>Data School</category><category>NumPy</category></item><item><title>Setting up Python for machine learning: scikit-learn and IPython Notebook</title><link>http://pyvideo.org/data-school/scikit-learn-02-machine-learning-setup.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Want to get started with machine learning in Python? I'll discuss the pros and cons of the scikit-learn library, show how to install my preferred Python distribution, and demonstrate the basic functionality of the IPython Notebook. If you don't yet know any Python, I'll also provide four recommended resources for learning Python.&lt;/p&gt;
&lt;p&gt;This is the second video in the series, &lt;a class="reference external" href="http://www.dataschool.io/machine-learning-with-scikit-learn/"&gt;Introduction to machine learning with scikit-learn&lt;/a&gt;. The notebook and resources shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/scikit-learn-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-15:data-school/scikit-learn-02-machine-learning-setup.html</guid><category>machine learning</category><category>data science</category><category>scikit-learn</category><category>tutorial</category><category>Data School</category><category>IPython notebook</category><category>Jupyter notebook</category></item><item><title>What is machine learning, and how does it work?</title><link>http://pyvideo.org/data-school/scikit-learn-01-what-is-machine-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you heard of &amp;quot;machine learning&amp;quot;, and you're trying to figure out exactly what that means? I'll give you my definition, provide some examples of machine learning, and explain at a high level how machine learning &amp;quot;works&amp;quot;.&lt;/p&gt;
&lt;p&gt;This is the first video in the series, &lt;a class="reference external" href="http://www.dataschool.io/machine-learning-with-scikit-learn/"&gt;Introduction to machine learning with scikit-learn&lt;/a&gt;. The notebook and resources shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/scikit-learn-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 07 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-07:data-school/scikit-learn-01-what-is-machine-learning.html</guid><category>machine learning</category><category>data science</category><category>scikit-learn</category><category>tutorial</category><category>Data School</category><category>supervised learning</category><category>unsupervised learning</category></item><item><title>Applied Time Series Econometrics in Python and R</title><link>http://pyvideo.org/pydata-san-francisco-2016/applied-time-series-econometrics-in-python-and-r.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData SF 2016&lt;/p&gt;
&lt;p&gt;Time series data is ubitious, and time series statistical models should be included in any data scientists’ toolkit. This tutorial covers the mathematical formulation, statistical foundation, and practical considerations of one of the most important classes of time series models: the AutoRegression Integrated Moving Average with Explanatory Variables model and its seasonal counterpart.&lt;/p&gt;
&lt;p&gt;Time series data is ubitious, both within and out of the field of data science: weekly initial unemployment claim, tick level stock prices, weekly company sales, daily number of steps taken recorded by a wearable, just to name a few. Some of the most important and commonly used data science techniques to analyze time series data are those in developed in the field of statistics. For this reason, time series statistical models should be included in any data scientists’ toolkit.&lt;/p&gt;
&lt;p&gt;This 120-minute tutorial covers the mathematical formulation, statistical foundation, and practical considerations of one of the most important classes of time series models, AutoRegression Integrated Moving Average with Explanatory Variables (ARIMAX) models, and its Seasonal counterpart (SARIMAX).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey Yau</dc:creator><pubDate>Wed, 24 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-24:pydata-san-francisco-2016/applied-time-series-econometrics-in-python-and-r.html</guid><category>tutorial</category></item><item><title>Build Data Apps by Deploying ML Models as API Services</title><link>http://pyvideo.org/pydata-san-francisco-2016/build-data-apps-by-deploying-ml-models-as-api-services.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData SF 2016
Ramesh Sampath | Build Data Apps by Deploying ML Models as API Services&lt;/p&gt;
&lt;p&gt;As data scientists, we love building models using IPython Notebooks / Scikit-Learn / Pandas eco-system. But integrating these models with an web app can be a challenge. In this tutorial, we will take our machine learning models and make them available as APIs for use by Web and Mobile Apps. We will also build a simple webapp that uses our prediction service.&lt;/p&gt;
&lt;p&gt;Deploy your ML Models as a Service&lt;/p&gt;
&lt;p&gt;In this talk, we will learn one way to take our Machine Learning models and make them available as a Prediction Service. We will work through the following steps.&lt;/p&gt;
&lt;p&gt;Create a Simple Machine learning Model using Scikit-Learn / Pandas
Pickle the model
Using Tornado Web App, Make this model available as an API Service
Build an Web App that uses this deployed Model
Add Authentication to our Prediction API
Optionally, add Redis to Cache Prediction Results
Deploy the model in the Cloud (AWS)
Please have Anaconda or Miniconda installed on your local machine. I will mostly be using Python 3.5, but Python 2.7 should be fine as well.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ramesh Sampath</dc:creator><pubDate>Wed, 24 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-24:pydata-san-francisco-2016/build-data-apps-by-deploying-ml-models-as-api-services.html</guid><category>tutorial</category><category>machine learning</category><category>scikit-learn</category><category>pandas</category><category>tornado</category></item><item><title>Building a live face recognition system in the blink of a very slow eye</title><link>http://pyvideo.org/pydata-amsterdam-2016/building-a-live-face-recognition-system-in-the-blink-of-a-very-slow-eye.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Amsterdam 2016&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;In this tutorial we will create a face recognition application from scratch, it will provide you hands-on experience on the basics of Face Recognition. We will use the OpenCV library which makes the tutorial accessible to beginners. Together, we'll go from building our face dataset to recognizing faces in a live video. If time permits we will use this face recognition system to classify banking da&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Building a live face recognition system in the blink of a very slow eye&lt;/p&gt;
&lt;p&gt;In this hands-on tutorial we will build a live face recognition system from scratch with the use of the OpenCV methods. Since face recognition is the main goal of this tutorial we will form teams of 2-3 people and recognize the faces in a live feed. We will make use of the OpenCV computer vision and machine learning library. OpenCV includes a comprehensive set of both classic and state-of-the-art computer vision and machine learning algorithms&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rodrigo Agundez</dc:creator><pubDate>Sat, 26 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-03-26:pydata-amsterdam-2016/building-a-live-face-recognition-system-in-the-blink-of-a-very-slow-eye.html</guid><category>tutorial</category><category>opencv</category></item><item><title>Software Carpentry 2 Day Scientific Python Course Part 4 of 4</title><link>http://pyvideo.org/scipy-2015/software-carpentry-2-day-scientific-python-course-part-4-of-4.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Azalee Bos</dc:creator><pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-15:scipy-2015/software-carpentry-2-day-scientific-python-course-part-4-of-4.html</guid><category>tutorial</category></item><item><title>Efficient Python for High Performance Parallel Computing</title><link>http://pyvideo.org/scipy-2015/efficient-python-for-high-performance-parallel-computing.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike McKerns</dc:creator><pubDate>Fri, 10 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-10:scipy-2015/efficient-python-for-high-performance-parallel-computing.html</guid><category>Tutorial</category></item><item><title>Modern Optimization Methods in Python</title><link>http://pyvideo.org/scipy-2015/modern-optimization-methods-in-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike McKerns</dc:creator><pubDate>Fri, 10 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-10:scipy-2015/modern-optimization-methods-in-python.html</guid><category>tutorial</category></item><item><title>Anatomy of matplotlib</title><link>http://pyvideo.org/scipy-2015/anatomy-of-matplotlib.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benjamin Root</dc:creator><pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-09:scipy-2015/anatomy-of-matplotlib.html</guid><category>Tutorial</category></item><item><title>Building Python Data Apps with Blaze and Bokeh</title><link>http://pyvideo.org/scipy-2015/building-python-data-apps-with-blaze-and-bokeh.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Doig-Cardet</dc:creator><pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-09:scipy-2015/building-python-data-apps-with-blaze-and-bokeh.html</guid><category>Tutorial</category></item><item><title>Cython: Blend the Best of Python and C++</title><link>http://pyvideo.org/scipy-2015/cython-blend-the-best-of-python-and-c.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kurt Smith</dc:creator><pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-09:scipy-2015/cython-blend-the-best-of-python-and-c.html</guid><category>Tutorial</category></item><item><title>Jupyter Advanced Topics Tutorial</title><link>http://pyvideo.org/scipy-2015/jupyter-advanced-topics-tutorial.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Frederic</dc:creator><pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-09:scipy-2015/jupyter-advanced-topics-tutorial.html</guid><category>tutorial</category></item><item><title>Software Carpentry 2 Day Scientific Python Course Part 3 of 4</title><link>http://pyvideo.org/scipy-2015/software-carpentry-2-day-scientific-python-course-part-3-of-4.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Azalee Bos</dc:creator><pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-09:scipy-2015/software-carpentry-2-day-scientific-python-course-part-3-of-4.html</guid><category>tutorial</category></item><item><title>Analyzing and Manipulating Data with Pandas</title><link>http://pyvideo.org/scipy-2015/analyzing-and-manipulating-data-with-pandas.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Rocher</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/analyzing-and-manipulating-data-with-pandas.html</guid><category>Tutorial</category></item><item><title>Computational Statistics I</title><link>http://pyvideo.org/scipy-2015/computational-statistics-i.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allen Downey</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/computational-statistics-i.html</guid><category>Tutorial</category></item><item><title>Computational Statistics II</title><link>http://pyvideo.org/scipy-2015/computational-statistics-ii.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Fonnesbeck</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/computational-statistics-ii.html</guid><category>Tutorial</category></item><item><title>Decorating Drones Using Drones to Delve Deeper into Intermediate Python</title><link>http://pyvideo.org/scipy-2015/decorating-drones-using-drones-to-delve-deeper-into-intermediate-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Harrison</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/decorating-drones-using-drones-to-delve-deeper-into-intermediate-python.html</guid><category>Tutorial</category></item><item><title>Geospatial Data with Open Source Tools in Python</title><link>http://pyvideo.org/scipy-2015/geospatial-data-with-open-source-tools-in-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kelsey Jordahl</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/geospatial-data-with-open-source-tools-in-python.html</guid><category>Tutorial</category></item><item><title>Image Analysis in Python with SciPy and Scikit Image</title><link>http://pyvideo.org/scipy-2015/image-analysis-in-python-with-scipy-and-scikit-image.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Van der Walt</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/image-analysis-in-python-with-scipy-and-scikit-image.html</guid><category>Tutorial</category></item><item><title>Introduction to NumPy</title><link>http://pyvideo.org/scipy-2015/introduction-to-numpy.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Jones</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/introduction-to-numpy.html</guid><category>tutorial</category></item><item><title>Machine Learning with Scikit Learn - Part I</title><link>http://pyvideo.org/scipy-2015/machine-learning-with-scikit-learn-part-i.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Mueller</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/machine-learning-with-scikit-learn-part-i.html</guid><category>tutorial</category></item><item><title>Machine Learning with Scikit Learn - Part II</title><link>http://pyvideo.org/scipy-2015/machine-learning-with-scikit-learn-part-ii.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Mueller</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/machine-learning-with-scikit-learn-part-ii.html</guid><category>tutorial</category></item><item><title>Multibody Dynamics and Control with Python</title><link>http://pyvideo.org/scipy-2015/multibody-dynamics-and-control-with-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Moore</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/multibody-dynamics-and-control-with-python.html</guid><category>tutorial</category></item><item><title>Software Carpentry 2 Day Scientific Python Course Part 1 of 4</title><link>http://pyvideo.org/scipy-2015/software-carpentry-2-day-scientific-python-course-part-1-of-4.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Azalee Bos</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/software-carpentry-2-day-scientific-python-course-part-1-of-4.html</guid><category>tutorial</category></item><item><title>Software Carpentry 2 Day Scientific Python Course Part 2 of 4</title><link>http://pyvideo.org/scipy-2015/software-carpentry-2-day-scientific-python-course-part-2-of-4.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Azalee Bos</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/software-carpentry-2-day-scientific-python-course-part-2-of-4.html</guid><category>tutorial</category></item><item><title>Simulating Robot, Vehicle, Spacecraft, and Animal Motion w/ Python Advanced</title><link>http://pyvideo.org/scipy-2016/simulating-robot-vehicle-spacecraft-and-animal-motion-w-python-advanced-scipy-2016-tutorial.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to derive, simulate, control, and visualize the motion of a multibody dynamic system with Python tools. These methods and techniques play an important role in the design and understanding of robots, vehicles, spacecraft, manufacturing machines, human motion, etc. In particular, the attendees will develop code to simulate the motion of a human balancing while standing. This is an advanced tutorial and domain specific but we have found that a broad audience enjoys the topic. Attendees should be familiar with the basics of the SciPy stack, in particular NumPy, SciPy, SymPy, and IPython and have some familiarity with classical mechanics. Details In this tutorial, attendees will learn how to derive, simulate, and visualize the motion of a multibody dynamic system with Python tools. The tutorial will demonstrate an advanced symbolic and numeric pipeline for a typical multibody simulation problem. By the end, the attendees will have developed code to simulate the uncontrolled and controlled motion of a human balancing while standing. We will highlight the derivation of realistic models of motion with the SymPy Mechanics package. Then we will cover code generation to create fast numerical functions that can be used to simulate the system. The simulation results will be plotted and visualized with a 3D WebGL browser based tool. Finally, we will use packages for optimal control to develop a controller that mimics human standing and visualize these results.&lt;/p&gt;
&lt;p&gt;Materials for this tutorial may be found here: &lt;a class="reference external" href="https://github.com/pydy/pydy-tutorial-human-standing"&gt;https://github.com/pydy/pydy-tutorial-human-standing&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason K. Moore</dc:creator><pubDate>Mon, 11 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-11:scipy-2016/simulating-robot-vehicle-spacecraft-and-animal-motion-w-python-advanced-scipy-2016-tutorial.html</guid><category>tutorial</category><category>pydy</category></item><item><title>Symbolic Computation with Python using SymPy (Beginner)</title><link>http://pyvideo.org/scipy-2016/symbolic-compution-with-python-using-sympy-beginner-scipy-2016-tutorial-ondrej-certik-et-al.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Materials for this tutorial are found here: &lt;a class="reference external" href="https://github.com/sympy/scipy-2016-tutorial"&gt;https://github.com/sympy/scipy-2016-tutorial&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ondřej Čertík</dc:creator><pubDate>Mon, 11 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-11:scipy-2016/symbolic-compution-with-python-using-sympy-beginner-scipy-2016-tutorial-ondrej-certik-et-al.html</guid><category>SciPy 2016</category><category>tutorial</category><category>SymPy</category></item><item><title>PyOhio 2010: Python 101 for the .NET Developer</title><link>http://pyvideo.org/pyohio-2010/pyohio-2010--python-101-for-the--net-developer.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 101 for the .NET Developer&lt;/p&gt;
&lt;p&gt;Presented by Sarah Dutkiewicz&lt;/p&gt;
&lt;p&gt;The first part of the session will cover the basics of Python - its
history, how its data structures compare to those we're familiar with in
the primary .NET languages, its strong and weak points, who's using it,
and why you as a developer - both generally speaking and as a .NET
developer - should care about Python. The second part of the session
will get into the demos - starting with some basic Python scripts and
getting into IronPython scripts, if time allows. By the end of this
session, you'll have an idea of what Python is, why you should know it
as a developer and specifically as a .NET developer, and how to get
setup and write a basic app in both Python and IronPython.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sarah Dutkiewicz</dc:creator><pubDate>Sat, 31 Jul 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--python-101-for-the--net-developer.html</guid><category>ironpython</category><category>.net</category><category>pyohio</category><category>pyohio2010</category><category>python-basics</category><category>tutorial</category></item><item><title>PyOhio 2010: So You Just Took "Python 101" -- What's Next?</title><link>http://pyvideo.org/pyohio-2010/pyohio-2010--so-you-just-took--quot-python-101-qu.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So You Just Took &amp;quot;Python 101&amp;quot; -- What's Next?&lt;/p&gt;
&lt;p&gt;Presented by Greg Lindstrom&lt;/p&gt;
&lt;p&gt;In this class we will develop, step-by-step and as a class, two simple
games, Hi/Low and Hangman. We will start from scratch and walk through
each step of each game discussing decision making, loops (&amp;quot;for&amp;quot;, &amp;quot;while&amp;quot;
and &amp;quot;if&amp;quot;), data structures (tuple, list and dictionary) and looking at
different ways to &amp;quot;get-r-done&amp;quot;.&lt;/p&gt;
&lt;p&gt;You should know a little about Python but don't have to know anything
else about programming (you should know how to edit and run a Python
program on your Operating System). Bring a computer with Python
installed if you want to play along.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Lindstrom</dc:creator><pubDate>Sat, 31 Jul 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--so-you-just-took--quot-python-101-qu.html</guid><category>datastructures</category><category>pyohio</category><category>pyohio2010</category><category>python-basics</category><category>tutorial</category></item></channel></rss>