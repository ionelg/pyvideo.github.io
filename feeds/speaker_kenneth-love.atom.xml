<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_kenneth-love.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2018-01-23T00:00:00+00:00</updated><entry><title>Those Who Care, Teach!</title><link href="http://pyvideo.org/pycascades-2018/those-who-care-teach.html" rel="alternate"></link><published>2018-01-23T00:00:00+00:00</published><updated>2018-01-23T00:00:00+00:00</updated><author><name>Kenneth Love</name></author><id>tag:pyvideo.org,2018-01-23:pycascades-2018/those-who-care-teach.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nothing's better than helping someone learn a concept: regex, build tools, or running their first script ever! Unfortunately, teaching is hard! For many, going beyond show-and-tell is just too intimidating. I'll teach you tips, tricks, &amp;amp; tools I've learned teaching Python to thousands of people.&lt;/p&gt;
</summary><category term="teaching python"></category></entry><entry><title>Those Who Care, Teach!</title><link href="http://pyvideo.org/pygotham-2017/those-who-care-teach.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Kenneth Love</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/those-who-care-teach.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many of us want to share our knowledge and bring people into programming or help advance people that are already here. One of the issues with this, though, is getting into teaching or mentoring is hard and a lot of us aren't sure how to do it. I can't help you get over any shyness you have but I can help you be listened to once you've reached out to people. In this talk, I'll cover ways to have a wider audience through inclusive language, positive reinforcements, and taking yourself off of any pedestals you've been placed on. I'll also cover a few tips and tricks for helping students learn what you're teaching.&lt;/p&gt;
</summary></entry><entry><title>The Ministry of Silly Talks</title><link href="http://pyvideo.org/pygotham-2017/the-ministry-of-silly-talks.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Fangfei Shen</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/the-ministry-of-silly-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks from PyGotham 2017&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Those Who Care, Teach!</title><link href="http://pyvideo.org/pyohio-2017/those-who-care-teach.html" rel="alternate"></link><published>2017-07-29T00:00:00+00:00</published><updated>2017-07-29T00:00:00+00:00</updated><author><name>Kenneth Love</name></author><id>tag:pyvideo.org,2017-07-29:pyohio-2017/those-who-care-teach.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There's nothing better than helping someone learn a tricky concept: a complex regular expression, a build tool, or even running their first script ever! Unfortunately, though, teaching is hard! For many, going beyond the show-and-tell we do with coworkers is just too intimidating. Let me teach you tips, tricks,  and tools I've collected over years of teaching Python to thousands of people.&lt;/p&gt;
</summary></entry><entry><title>Django Admin: Basics and Beyond</title><link href="http://pyvideo.org/pycon-us-2017/django-admin-basics-and-beyond.html" rel="alternate"></link><published>2017-05-18T00:00:00+00:00</published><updated>2017-05-18T00:00:00+00:00</updated><author><name>Kenneth Love</name></author><id>tag:pyvideo.org,2017-05-18:pycon-us-2017/django-admin-basics-and-beyond.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django's admin is a great tool but it isn't always the easiest or
friendliest to set up and customize. The ModelAdmin class has a lot of
attributes and methods to understand and come to grips with. On top of
these attributes, the admin's inlines, custom actions, custom media, and
more mean that, really, you can do anything you need with the admin...if
you can figure out how. The docs are good but leave a lot to
experimentation and the code is notoriously dense.&lt;/p&gt;
&lt;p&gt;In this tutorial, you'll learn the basics of setting up the admin so you
can get your job done. Then we'll dive deeper and see how advanced
features like autocomplete, Markdown editors, image editors, and others
would be added to make the admin really shine.&lt;/p&gt;
</summary></entry><entry><title>PyDX 2015: Tutorial — Teach a New Object Old Tricks</title><link href="http://pyvideo.org/pydx-2015/pydx-2015-tutorial-teach-a-new-object-old-tricks.html" rel="alternate"></link><published>2015-10-10T00:00:00+00:00</published><updated>2015-10-10T00:00:00+00:00</updated><author><name>Kenneth Love</name></author><id>tag:pyvideo.org,2015-10-10:pydx-2015/pydx-2015-tutorial-teach-a-new-object-old-tricks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyDX 2015 tutorial by Kenneth Love&lt;/p&gt;
</summary></entry><entry><title>Django 101</title><link href="http://pyvideo.org/pycon-us-2016/kenneth-love-django-101-pycon-2016.html" rel="alternate"></link><published>2016-05-29T00:00:00+00:00</published><updated>2016-05-29T00:00:00+00:00</updated><author><name>Kenneth Love</name></author><id>tag:pyvideo.org,2016-05-29:pycon-us-2016/kenneth-love-django-101-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Kenneth Love&lt;/p&gt;
&lt;p&gt;Want to build web apps with Django but don't know where to start? Did the Django tutorial but still feel unsure? Django 101 is a gentle introduction to Django. By the end, you'll be more confident in starting projects, apps, and tying together the most common pieces of Django.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Give a Python a Pony</title><link href="http://pyvideo.org/django-birthday/give-a-python-a-pony.html" rel="alternate"></link><published>2015-07-11T00:00:00+00:00</published><updated>2015-07-11T00:00:00+00:00</updated><author><name>Kenneth Love</name></author><id>tag:pyvideo.org,2015-07-11:django-birthday/give-a-python-a-pony.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A couple of years ago, I was faced with one of the scariest situations
there is for a self-employed developer: I was burned out. The blinking
cursor in Vim was taunting me and no number of GitHub issues could
motivate me to churn out more than a few lines of code in a day. This
burnout, though, led me back to an early love: I started teaching full
time.This is a talk in two parts. In part one, I’ll talk about some of
the teaching triumphs I’ve had and witnessed thanks to a new career, the
Python and Django worlds, and my employer, Treehouse (and others!). In
the second part, I’ll share ways you can start teaching in your own
communities and using your own talents, so we can all make the world
better through learning.&lt;/p&gt;
</summary></entry><entry><title>Views can be Classy!</title><link href="http://pyvideo.org/djangocon-us-2012/views-can-be-classy.html" rel="alternate"></link><published>2012-09-04T00:00:00+00:00</published><updated>2012-09-04T00:00:00+00:00</updated><author><name>Kenneth Love</name></author><id>tag:pyvideo.org,2012-09-04:djangocon-us-2012/views-can-be-classy.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An overview of what class-based views (CBVs) are, which ones are
available, and how to use them in your projects. I'll also cover
creating mixins, where function-based views still make sense, and how to
test CBVs. As part of this, I'll be covering my django-braces
(&lt;a class="reference external" href="https://crate.io/packages/django-braces/"&gt;https://crate.io/packages/django-braces/&lt;/a&gt;) package.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It seems like most people in the Django community either don't have any
idea how class-based views work or are scared to try them out. I want to
help with a solid introduction to the technology.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The usual &amp;quot;who I am&amp;quot; bit.&lt;/li&gt;
&lt;li&gt;Most other things in Django are classes.&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;models&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;forms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;even templates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Views should be classes, too.&lt;/li&gt;
&lt;li&gt;What view classes are provided by Django.&lt;/li&gt;
&lt;li&gt;How to create your own mixins to clean up pain points&lt;/li&gt;
&lt;li&gt;Where function-based views are still handy.&lt;/li&gt;
&lt;li&gt;Example CBVs for common use cases&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;handling form input for more than one form&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;serving different content based on users&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="class-based-views"></category><category term="django"></category></entry><entry><title>Getting Started with Django, a crash course</title><link href="http://pyvideo.org/pycon-us-2014/getting-started-with-django-a-crash-course.html" rel="alternate"></link><published>2014-04-11T00:00:00+00:00</published><updated>2014-04-11T00:00:00+00:00</updated><author><name>Kenneth Love</name></author><id>tag:pyvideo.org,2014-04-11:pycon-us-2014/getting-started-with-django-a-crash-course.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Getting Started With Django is a well-established series of videos
teaching best practices and common approaches for building web apps to
people new to Django. This tutorial combines the first few lessons into
a single lesson. Attendees will follow along as I start and build an
entire simple web app and, network permitting, deploy it to Heroku.&lt;/p&gt;
</summary></entry></feed>