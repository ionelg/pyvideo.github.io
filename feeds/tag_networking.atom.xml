<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_networking.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-10-25T00:00:00+00:00</updated><entry><title>Building your own SDN with Debian Linux, Salt Stack and Python</title><link href="http://pyvideo.org/pycon-de-2017/building-your-own-sdn-with-debian-linux-salt-stack-and-python.html" rel="alternate"></link><published>2017-10-25T00:00:00+00:00</published><updated>2017-10-25T00:00:00+00:00</updated><author><name>Maximilian Wilhelm</name></author><id>tag:pyvideo.org,2017-10-25:pycon-de-2017/building-your-own-sdn-with-debian-linux-salt-stack-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Maximilian Wilhelm&lt;/strong&gt; (&amp;#64;BarbarossaTM)&lt;/p&gt;
&lt;p&gt;By day Maximilian Wilhelm is working as a Senior Infrastructure Architect in the central computing department of the University of Paderborn, by night he's hacking on the infrastructure of the Freifunk Hochstift network and some Open Source projects. Since the early 2000s he has a heart for Linux and Open Source, developed a weaknes for networking, IPv6 and routing a long while a go and has beed a speaker and tutor at the #Routingdays. Lately he got his hands dirty with ifupdown2, VXLAN, Linux VRFs, infrastructure automation with Salt Stack and &amp;quot;kommunistischen Frickelnetzen&amp;quot; and is afraid of SDNs ever since. In his spare time he likes playing piano and the organ, taking pictures of natures and cute animals, and trying to stay on the board while Windsurfing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this talk you will get an overview about some awesome features of comtemporary Linux networking, how to easily integrate them with some cool open source tools, and glueing all this together with Salt Stack and some Python to get your very own SDN controller for a service-provider style network.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Topics like Infrastructure Automation / Orchestration, Cloud, and Software Defined Networks are on everyones tongue and nearly all network vendors who think highly of themselves provide products and maybe even solutions in this sphere of buzzwords.&lt;/p&gt;
&lt;p&gt;Within the last years there has been a paradigm shift towards host and segment routing – think »IP Fabric« – as well as a focus on open protocols and standards like OSPF, IS-IS, BGP &amp;amp; MPLS not only in the data center. This even brought us some new standards like VXLAN and a bunch of open source based “open networking” platforms. Now we aren't always locked to the operating systems of a networking vendor but can choose the control plane software from a variety of Linux based solutions which can be managed and orchestrated by lots of different means.&lt;/p&gt;
&lt;p&gt;Thanks to the Linux basis and the Open Source spirit of some vendors, some features (VRFs, MPLS forwarding plane, …) today are part of the upstream Linux kernel and available for everyone! Most notable are the contributions of the Debian Linux based platform from Cumulus Networks, which include the VRF support for Linux, some MPLS patches for FRR and ifupdown2 (which is written in Python :-)).&lt;/p&gt;
&lt;p&gt;Putting a bunch of these technologies and ideas together will open up a lot of powerful options for building low budget yet mighty networks. This talk will lay out how to build a SDN based service provide like infrastructure with the help of Salt Stack, some 1000 lines of Python and a bunch of affordable hardware where overlay networks and anycast aren't things to be scared of. The Freifunk Hochstift network and server infrastructure will be used as an example.&lt;/p&gt;
&lt;p&gt;The target audience mainly consists of (Linux-) system and network engineers / architects, who already have some experience with the other world. A positive attitude towards automation and magic is a plus.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</summary><category term="sdn"></category><category term="saltstack"></category><category term="linux"></category><category term="debian"></category><category term="networking"></category><category term="devops"></category><category term="use-case"></category><category term="netops"></category><category term="netdevops"></category></entry><entry><title>Getting started with requests HTTP library</title><link href="http://pyvideo.org/pycon-italia-2017/getting-started-with-requests-http-library.html" rel="alternate"></link><published>2017-04-07T00:00:00+00:00</published><updated>2017-04-07T00:00:00+00:00</updated><author><name>Andrea Grandi</name></author><id>tag:pyvideo.org,2017-04-07:pycon-italia-2017/getting-started-with-requests-http-library.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;requests is one of the most advanced and simple to use HTTP libraries.&lt;/p&gt;
&lt;p&gt;The presentations is going to show how to get started with it, how to
consume REST APIs and last but not least how to properly mock and test
our code.&lt;/p&gt;
</summary><category term="requests"></category><category term="api"></category><category term="networking"></category><category term="REST"></category></entry><entry><title>PyOhio 2010: Implementation of a Numerical Simulation in Python</title><link href="http://pyvideo.org/pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Implementation of a Numerical Simulation in Python&lt;/p&gt;
&lt;p&gt;Presented by Jeffrey B. Armstrong&lt;/p&gt;
&lt;p&gt;The Python programming language is well suited for numerical computation
under a variety of circumstances. Python offers advantages over
competing free and commercial technologies, including price,
functionality, and maintainability. Specifically, the combination of
mature numerical libraries and liberal licensing allow complex
simulations to be coded with ease and to be made available to nearly all
interested parties. !NumPy/!SciPy, database access, networking, and
optimization techniques are examined in detail with respect to numerical
computation. A practical example involving an aerothermal commercial
turbofan aircraft engine simulation showcases these advantages. An
aircraft engine is broken down into discrete stages, including
compressors, turbines, and other flow-related components. Commonalities
between components, such as rotation and the presence of inlet and exit
conditions, map cleanly to the object-oriented nature of Python. Based
on simulation needs and hardware availability, Python allows for the
parallel computation of simulations without the expense and complexity
of commercial parallelization packages.&lt;/p&gt;
</summary><category term="database"></category><category term="networking"></category><category term="numpy"></category><category term="optimization"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="scipy"></category><category term="simulation"></category></entry><entry><title>Social Network Analysis in Python</title><link href="http://pyvideo.org/europython-2011/social-network-analysis-in-python.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Enrico Franchi</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/social-network-analysis-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Enrico Franchi - 23 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Network Analysis has gained a huge recognition since the widespread
adoption of on-line social networking systems. It is a
cross-disciplinary subject with important contributions from researchers
of different areas such as physics, sociology, maths and computer
science.&lt;/p&gt;
&lt;p&gt;However, Network Analysis is also a useful tool for the working
programmer. The basic techniques which will be introduced in this talk
can be used, for example, both to i) test the robustness and resilience
to damage of a technological network and ii) understand the structure of
a social network, which can in turn lead to insight on trends and
preferences gathering information from modern on-line social networking
systems.&lt;/p&gt;
&lt;p&gt;Along with the concepts, working Python code is presented, both using
existing network analysis Python tools and numeric packages. The focus
is mainly placed on code, which will be shown and discussed together
with the formal theory.&lt;/p&gt;
&lt;p&gt;Basic maths skills and basic knowledge of the Python programming
language are the only suggested prerequisites.&lt;/p&gt;
</summary><category term="analysis"></category><category term="network"></category><category term="networking"></category></entry><entry><title>Networking Libraries in Python</title><link href="http://pyvideo.org/pycon-au-2011/networking-libraries-in-python.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Senthil Kumuran</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/networking-libraries-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will explore the core networking libraries available in
Python.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;Python Standard Library. http and urllib package (Python3 and
Python2).&lt;/li&gt;
&lt;li&gt;Capabilities of other 3rd party networking libraries - pycurl and
httplib2. When to use them and why they exist.&lt;/li&gt;
&lt;li&gt;Asychronous Network IO using Twisted Matrix Framework.&lt;/li&gt;
&lt;li&gt;Tornado framework capablities - Generic overview.&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="framework"></category><category term="network"></category><category term="networking"></category><category term="pycurl"></category><category term="tornado"></category><category term="twisted"></category><category term="urllib"></category></entry></feed>