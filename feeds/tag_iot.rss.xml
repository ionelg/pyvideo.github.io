<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Tue, 23 Jan 2018 00:00:00 +0000</lastBuildDate><item><title>Can you please pass the data? IoT communication with MicroPython</title><link>http://pyvideo.org/pycascades-2018/can-you-please-pass-the-data-iot-communication-with-micropython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come learn a bit about Micropython, a specialized version of Python for micro controllers, and how you can use it to pass messages among IoT devices. Using the concepts and code presented this talk will include a live demo of a connected temperature sensor (somewhat like the NEST). Beginner friendly!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sev Leonard</dc:creator><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-23:pycascades-2018/can-you-please-pass-the-data-iot-communication-with-micropython.html</guid><category>iot</category><category>micropython</category></item><item><title>Continuous Delivery for Iot with Python and Iottly</title><link>http://pyvideo.org/pycon-italia-2017/continuous-delivery-for-iot-with-python-and-iottly.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We know, continuous delivery is one of the current buzzwords (much like
IoT was a couple of years ago). But think of an industrial IoT project
connecting thousands of remote and inaccessible devices which should be
kept secure and updated over time. Now, imagine you can just write
Python code for your devices, test it over-the-internet both locally in
the lab, and in a real test environment simply by pushing your code to
specific branches and finally just pushing to master to update the
entire fleet.&lt;/p&gt;
&lt;p&gt;During the talk we will use Iottly to showcase this continuous delivery
pattern for the internet of things, with live code and connected devices
(Raspberry Pi).&lt;/p&gt;
&lt;p&gt;Iottly is a Development and Management Cloud Service for IoT Projects,
built by TomorrowData. Iottly is written in Python and is open source
(github). It features a Python sandbox for the devices, an online editor
to program the devices over-the-internet, and the integration with git
as the base for continuous delivery.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Terna</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/continuous-delivery-for-iot-with-python-and-iottly.html</guid><category>raspberrypi</category><category>git</category><category>continuous-delivery</category><category>iot</category><category>over-the-air firmware upgrade</category><category>InternetOfThings</category><category>InternetDelleCose</category><category>github</category><category>IDE</category></item><item><title>Programming the Web of Things with Python and MicroPython</title><link>http://pyvideo.org/pyconweb-2017/programming-the-web-of-things-with-python-and-micropython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this session you will get a gentle introduction to the ever-expanding world of small programmable devices: learn to use tiny microcontrollers to connect to sensors and talk to APIs - all using MicroPython, a subset of Python 3 for use in constrained environments.&lt;/p&gt;
&lt;p&gt;You will be introduced to the basics of physical computing and the joys (and some of the pains) of writing Python code for devices that weigh less than a piece of chewing gum but still have the power to communicate with web APIs, act as wireless access points, even host a small web server, and more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hardy Erlinger</dc:creator><pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-28:pyconweb-2017/programming-the-web-of-things-with-python-and-micropython.html</guid><category>iot</category><category>micropython</category></item><item><title>Python and IoT: From Chips and Bits to Data Science</title><link>http://pyvideo.org/pydata-seattle-2017/python-and-iot-from-chips-and-bits-to-data-science.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will take you through the design of a smart lighting system, including sensor hardware and software (based around MicroPython), data analysis (using NumPy, Pandas, and Jupyter), and lighting control (using Hidden Markov Models via Hmmlearn). From the talk, you should get a sense of how the hardware, software, and math fit together to create a solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ever want to know what is behind the &amp;quot;Internet of Things&amp;quot; hype? I wanted to as well, so I embarked on a side project to learn more. This talk is the story of my journey, using, of course, my favorite programming language, Python.&lt;/p&gt;
&lt;p&gt;In this talk, I will take you through my project, a lighting replay system. The application monitors the light levels in several rooms of a residence and then replays a similar pattern when the house is unoccupied. The goal is to make the house look occupied, with a lighting pattern that is different every day, but looks realistic. It accounts for the different patterns found in each individual room as well as seasonal factors (e.g. changing sunrise/sunset times). The full source code for the application is available on github &lt;a class="reference external" href="https://github.com/mpi-sws-rse/thingflow-examples/tree/master/lighting_replay_app"&gt;https://github.com/mpi-sws-rse/thingflow-examples/tree/master/lighting_replay_app&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Fischer</dc:creator><pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-06:pydata-seattle-2017/python-and-iot-from-chips-and-bits-to-data-science.html</guid><category>iot</category><category>micropython</category></item><item><title>From SCADA to IoT with Python</title><link>http://pyvideo.org/scipyla-2016/from-scada-to-iot-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestrante: Nahuel Defossé&lt;/p&gt;
&lt;p&gt;Resumo:&lt;/p&gt;
&lt;p&gt;This talk will describe a SCADA system build with Python with an home brew protocol called Mara for a power substation as part of a research and development project in UNPJSB of Trelew city.&lt;/p&gt;
&lt;p&gt;We will describe some of the challenges faced during its development and how they were overcome. Specially non functional requirements such as reliability and low latency (MQTT, AMQP and STOMP).&lt;/p&gt;
&lt;p&gt;Finally we will cover how we're iterating over its architecture to provide a more suitable solution for IoT field and how we're using Python at lower levels PlatformIO and how we plan to integrate CIAA (Argentine Open Industrial Computer).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nahuel Defossé</dc:creator><pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-25:scipyla-2016/from-scada-to-iot-with-python.html</guid><category>SCADA</category><category>IoT</category><category>CIIA</category></item></channel></rss>