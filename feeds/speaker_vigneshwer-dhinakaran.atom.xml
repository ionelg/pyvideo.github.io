<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_vigneshwer-dhinakaran.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2018-05-13T00:00:00+00:00</updated><entry><title>Pumping up Python modules using Rust</title><link href="http://pyvideo.org/pycon-us-2018/pumping-up-python-modules-using-rust.html" rel="alternate"></link><published>2018-05-13T00:00:00+00:00</published><updated>2018-05-13T00:00:00+00:00</updated><author><name>vigneshwer dhinakaran</name></author><id>tag:pyvideo.org,2018-05-13:pycon-us-2018/pumping-up-python-modules-using-rust.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you’ve spent much time writing (or debugging) Python performance problems, you’ve probably had a hard time managing memory with its limited language support.&lt;/p&gt;
&lt;p&gt;In this talk, we venture deep into the belly of the Rust Language to uncover the secret incantations for building high performance and memory safe Python extensions using Rust.&lt;/p&gt;
&lt;p&gt;Rust has a lot to offer in terms of safety and performance for high-level programming languages such Python, Ruby, Js and more with its easy Foreign Function Interface capabilities which enables developers to easily develop bindings for foreign code.&lt;/p&gt;
</summary><category term="rust"></category></entry></feed>