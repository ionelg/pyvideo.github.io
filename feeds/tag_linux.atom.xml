<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_linux.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-10-25T00:00:00+00:00</updated><entry><title>Building your own SDN with Debian Linux, Salt Stack and Python</title><link href="http://pyvideo.org/pycon-de-2017/building-your-own-sdn-with-debian-linux-salt-stack-and-python.html" rel="alternate"></link><published>2017-10-25T00:00:00+00:00</published><updated>2017-10-25T00:00:00+00:00</updated><author><name>Maximilian Wilhelm</name></author><id>tag:pyvideo.org,2017-10-25:pycon-de-2017/building-your-own-sdn-with-debian-linux-salt-stack-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Maximilian Wilhelm&lt;/strong&gt; (&amp;#64;BarbarossaTM)&lt;/p&gt;
&lt;p&gt;By day Maximilian Wilhelm is working as a Senior Infrastructure Architect in the central computing department of the University of Paderborn, by night he's hacking on the infrastructure of the Freifunk Hochstift network and some Open Source projects. Since the early 2000s he has a heart for Linux and Open Source, developed a weaknes for networking, IPv6 and routing a long while a go and has beed a speaker and tutor at the #Routingdays. Lately he got his hands dirty with ifupdown2, VXLAN, Linux VRFs, infrastructure automation with Salt Stack and &amp;quot;kommunistischen Frickelnetzen&amp;quot; and is afraid of SDNs ever since. In his spare time he likes playing piano and the organ, taking pictures of natures and cute animals, and trying to stay on the board while Windsurfing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this talk you will get an overview about some awesome features of comtemporary Linux networking, how to easily integrate them with some cool open source tools, and glueing all this together with Salt Stack and some Python to get your very own SDN controller for a service-provider style network.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Topics like Infrastructure Automation / Orchestration, Cloud, and Software Defined Networks are on everyones tongue and nearly all network vendors who think highly of themselves provide products and maybe even solutions in this sphere of buzzwords.&lt;/p&gt;
&lt;p&gt;Within the last years there has been a paradigm shift towards host and segment routing – think »IP Fabric« – as well as a focus on open protocols and standards like OSPF, IS-IS, BGP &amp;amp; MPLS not only in the data center. This even brought us some new standards like VXLAN and a bunch of open source based “open networking” platforms. Now we aren't always locked to the operating systems of a networking vendor but can choose the control plane software from a variety of Linux based solutions which can be managed and orchestrated by lots of different means.&lt;/p&gt;
&lt;p&gt;Thanks to the Linux basis and the Open Source spirit of some vendors, some features (VRFs, MPLS forwarding plane, …) today are part of the upstream Linux kernel and available for everyone! Most notable are the contributions of the Debian Linux based platform from Cumulus Networks, which include the VRF support for Linux, some MPLS patches for FRR and ifupdown2 (which is written in Python :-)).&lt;/p&gt;
&lt;p&gt;Putting a bunch of these technologies and ideas together will open up a lot of powerful options for building low budget yet mighty networks. This talk will lay out how to build a SDN based service provide like infrastructure with the help of Salt Stack, some 1000 lines of Python and a bunch of affordable hardware where overlay networks and anycast aren't things to be scared of. The Freifunk Hochstift network and server infrastructure will be used as an example.&lt;/p&gt;
&lt;p&gt;The target audience mainly consists of (Linux-) system and network engineers / architects, who already have some experience with the other world. A positive attitude towards automation and magic is a plus.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</summary><category term="sdn"></category><category term="saltstack"></category><category term="linux"></category><category term="debian"></category><category term="networking"></category><category term="devops"></category><category term="use-case"></category><category term="netops"></category><category term="netdevops"></category></entry><entry><title>dev --+ qual --+ prod</title><link href="http://pyvideo.org/pycon-de-2012/dev-qual-prod.html" rel="alternate"></link><published>2012-11-01T00:00:00+00:00</published><updated>2012-11-01T00:00:00+00:00</updated><author><name>Thomas Güttler</name></author><id>tag:pyvideo.org,2012-11-01:pycon-de-2012/dev-qual-prod.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Es wird das Konzept vorgestellt, wie man Projekte strukturieren kann um
von der ersten Minute an eine mind. dreistufige Landschaft (Entwicklung,
Qualitätssicherung, Produktiv) vorzusehen.&lt;/p&gt;
&lt;p&gt;Die zentrale Rolle spielen getrennte Systemnutzer um isolierte
Umgebungen zu erstellen. Dieser Ansatz ist für Python-Server-Anwendungen
wie z.B Django- Anwendungen sehr gut anwendbar.&lt;/p&gt;
&lt;p&gt;Seit einiger Zeit setzen wir getrennte Linux-Nutzer anstatt virtualenv
ein. Das zentrale Merkmal, ist der Name des Systemnutzers:&lt;/p&gt;
&lt;p&gt;Namensschema des Linux-Nutzers: app_customer_stage&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;app ist die Anwendung (zB cms)&lt;/li&gt;
&lt;li&gt;customer ist ein Kürzel für den Kunden&lt;/li&gt;
&lt;li&gt;stage ist d, q, p (dev, qual, prod).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beispiel:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;mycms_customer1_d Entwicklungssystem&lt;/li&gt;
&lt;li&gt;mycms_customer1_q Qualitätssicherung&lt;/li&gt;
&lt;li&gt;mycms_customer1_p Produktivsystem&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In einer zentralen Datei wird konfiguriert auf welchem Host welches
System läuft. Jedes System kennt das nächste System (Bsp dev-&amp;gt;qual), so
dass ein Abgleich relativ einfach möglich ist.&lt;/p&gt;
&lt;p&gt;Das simple System hat viele Vorteile, die ich in dem Vortrag vorstellen
möchte.&lt;/p&gt;
</summary><category term="deployment"></category><category term="linux"></category><category term="virtualenv"></category></entry><entry><title>PyCon 2009: How to Build Applications Linux Distributions will Package (#78)</title><link href="http://pyvideo.org/pycon-us-2009/pycon-2009--how-to-build-applications-linux-distr.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--how-to-build-applications-linux-distr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: no audio first 1.5m] If you've ever created a nifty
application that makes people's lives easier you know the truly hard
part is convincing others to use it. One way to increase the number of
people installing your software is to convince Linux distributions to
package your software so that their end users can install by using the
system tools they're used to. One way of convincing them is by making
your application easy to package.&lt;/p&gt;
</summary><category term="linux"></category><category term="packaging"></category><category term="pycon"></category><category term="pycon2009"></category></entry></feed>