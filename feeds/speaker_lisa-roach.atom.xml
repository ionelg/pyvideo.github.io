<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_lisa-roach.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2018-05-12T00:00:00+00:00</updated><entry><title>Demystifying the Patch Function</title><link href="http://pyvideo.org/pycon-us-2018/demystifying-the-patch-function.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Lisa Roach</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/demystifying-the-patch-function.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the most challenging and important thing fors for Python developers learn is the unittest mock library. The patch function is in particular confusing- there are many different ways to use it. Should I use a context manager? Decorator? When would I use it manually? Improperly used patch functions can make unit tests useless, all the while making them look as if they are correctly testing code. Letâ€™s learn how to wield patch with confidence!&lt;/p&gt;
</summary></entry></feed>