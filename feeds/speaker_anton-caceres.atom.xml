<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_anton-caceres.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-07-11T00:00:00+00:00</updated><entry><title>Growing a Python community</title><link href="http://pyvideo.org/pycon-italia-2017/growing-a-python-community.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/growing-a-python-community.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about people, not tools.&lt;/p&gt;
&lt;p&gt;I would like to share one recipe of building a community from scratch.&lt;/p&gt;
&lt;p&gt;It reveals hands-on experience about the organisational journey,
including insider details and financial questions.&lt;/p&gt;
&lt;p&gt;The information is packed into the story, how one year ago a tempting
idea of making a little Python conference in Munich was born. Six month
later, with poor German skills, no business network and mostly foreign
crew a little idea was converted into PyCon.DE. This conference had a
noticeable Italian flavour, and itâ€™s time to tell why.&lt;/p&gt;
</summary><category term="humor"></category><category term="conferences"></category><category term="business"></category><category term="community"></category><category term="beer"></category><category term="teamwork"></category><category term="social"></category><category term="education"></category></entry><entry><title>Conference opening</title><link href="http://pyvideo.org/pyconweb-2017/conference-opening.html" rel="alternate"></link><published>2017-05-27T00:00:00+00:00</published><updated>2017-05-27T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2017-05-27:pyconweb-2017/conference-opening.html</id><summary type="html"></summary><category term="opening"></category></entry><entry><title>Using the right Async tool, present day</title><link href="http://pyvideo.org/europython-2017/using-the-right-async-tool-present-day.html" rel="alternate"></link><published>2017-07-11T00:00:00+00:00</published><updated>2017-07-11T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2017-07-11:europython-2017/using-the-right-async-tool-present-day.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Recent releases like AsyncIO and Django Channels gave a new push
towards building real-time web-apps fast and easy. However, as
similar tools exist in Python since 2000th, how should we balance
between modern and time-proven?&lt;/p&gt;
&lt;p&gt;This talk includes but is not focused just on AsyncIO. It gives an
overview of Async libraries in Python, and helps with choosing a
right tool for various web tasks.&lt;/p&gt;
&lt;p&gt;It describes caveats of using Twisted, Tornado and AsyncIO including
theory and live code, and concludes with a basic overview of Django Channels.&lt;/p&gt;
&lt;p&gt;Talk plan&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why do we need Async Web (5 min)&lt;/li&gt;
&lt;li&gt;Existing libraries and frameworks:  Twisted, Tornado, AsyncIO (15 min)&lt;/li&gt;
&lt;li&gt;Sample task, sample code, conclusions (10 min)&lt;/li&gt;
&lt;li&gt;(optional) what's about Django Channels?&lt;/li&gt;
&lt;li&gt;Q &amp;amp; A (5 min)&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Lightning talks: PyCon web 2017</title><link href="http://pyvideo.org/pycon-sk-2017/lightning-talks-pycon-web-2017.html" rel="alternate"></link><published>2017-03-12T00:00:00+00:00</published><updated>2017-03-12T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2017-03-12:pycon-sk-2017/lightning-talks-pycon-web-2017.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks: Anton Caceres - PyCon web 2017&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>From Code to Community</title><link href="http://pyvideo.org/pycon-sk-2017/from-code-to-community.html" rel="alternate"></link><published>2017-03-11T00:00:00+00:00</published><updated>2017-03-11T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2017-03-11:pycon-sk-2017/from-code-to-community.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about people, not tools. It takes you on a journey from building software to building a community.&lt;/p&gt;
&lt;p&gt;Python communities are special in many ways, from non-commercial nature to viral enthusiasm and friendliness. This talk shares one recipe of growing such community, covering hands-on experience, insider details and financial challenges.&lt;/p&gt;
&lt;p&gt;The recipe is based on the story how one year ago a tempting idea of making Python meetups in Munich was converted into PyCon.DE. No companies, no funds, no business network. Just Python community, and some enthusiasm.&lt;/p&gt;
</summary></entry><entry><title>Better async code with Python 3</title><link href="http://pyvideo.org/pycon-es-2015/better-async-code-with-python-3.html" rel="alternate"></link><published>2016-02-02T00:00:00+00:00</published><updated>2016-02-02T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2016-02-02:pycon-es-2015/better-async-code-with-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn async web development hands-on by using asyncio event loop in combination with subgenerator delegation syntax (yield from), creating beautiful concurrent code without writing a single callback.&lt;/p&gt;
</summary><category term="workshop"></category><category term="asyncio"></category></entry><entry><title>Better asynchronous code with Tornado and Python 3</title><link href="http://pyvideo.org/europython-2015/better-asynchronous-code-with-tornado-and-python-3.html" rel="alternate"></link><published>2015-08-05T00:00:00+00:00</published><updated>2015-08-05T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2015-08-05:europython-2015/better-asynchronous-code-with-tornado-and-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Anton Caceres - Better asynchronous code with Tornado and Python 3
[EuroPython 2015]
[23 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;The asyncio module introduced in Python 3.4 is a game-changer for I/O
management and event-driven network programming in Python. Aiming to
be a lower-level implementation of an asynchronous event loop, it
intends that higher level frameworks like Tornado, Twisted or Gevent
will build on top of it, taking advantage of the shared interface for
writing concurrent event-driven code across different Python
frameworks.&lt;/p&gt;
&lt;p&gt;This talk connects theory with practice, presenting how Tornado can
run in the asyncio event loop and take advantage of the subgenerator
delegation syntax (yield from) to provide a high degree of concurrency
while keeping the simplicity of sequential code. It explains the
concept of coroutines, futures and ioloop, exposing Python 3 code for
sample web tasks. The talk completes with a basic demo of running this
code on Tornado, comparing its syntax and performance with popular
asynchronous frameworks from other languages.&lt;/p&gt;
</summary></entry><entry><title>Asynchronous Web Development with Python 3</title><link href="http://pyvideo.org/pycon-italia-2015/asynchronous-web-development-with-python-3.html" rel="alternate"></link><published>2015-05-29T00:00:00+00:00</published><updated>2015-05-29T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2015-05-29:pycon-italia-2015/asynchronous-web-development-with-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The asyncio module with updated chainable coroutines introduced with
Python 3.4 was a game-changer for I/O management and asynchronous web
development in Python. Even web frameworks like Tornado that already had
an own asynchronous IO-loop implementation, can now take advantage of
the subgenerator delegation syntax to provide a high degree of
concurrency and responsiveness while keeping the simplicity of
sequential code. This talk will focus on the new way of writing
asynchronous code with Python 3, explaining the concept of futures,
coroutines and ioloop. It will complete with a basic demo of running
this code on Tornado, comparing its syntax and performance with other
popular web frameworks.&lt;/p&gt;
&lt;p&gt;It is also possible to present this topic in a workshop format. Contact
me for details.&lt;/p&gt;
</summary></entry></feed>