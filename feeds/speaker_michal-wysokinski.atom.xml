<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_michal-wysokinski.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-07-11T00:00:00+00:00</updated><entry><title>Running Python code in parallel and asynchronously</title><link href="http://pyvideo.org/europython-2017/running-python-code-in-parallel-and-asynchronously.html" rel="alternate"></link><published>2017-07-11T00:00:00+00:00</published><updated>2017-07-11T00:00:00+00:00</updated><author><name>Michal Wysokinski</name></author><id>tag:pyvideo.org,2017-07-11:europython-2017/running-python-code-in-parallel-and-asynchronously.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;My outline will be:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What does it mean to run code in parallel in Python? How does it differ from concurrency? Can they be applied at the some time?&lt;/li&gt;
&lt;li&gt;GIL and why it complicates parallelism in Python (CPython), but only to some extent.&lt;/li&gt;
&lt;li&gt;Difference between a thread and a process from the OS point of view.&lt;/li&gt;
&lt;li&gt;When parallelism in Python is useful and when to avoid it.&lt;/li&gt;
&lt;li&gt;Description of how to achieve parallel execution in CPython and how to do it properly.&lt;/li&gt;
&lt;li&gt;Possible traps when using parallel programming in Python.&lt;/li&gt;
&lt;li&gt;What happens if the code runs both in parallel and asynchronously?&lt;/li&gt;
&lt;li&gt;Is it really beneficial?&lt;/li&gt;
&lt;li&gt;How such execution can be achieved?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As the outline shows I will focus on the parallel part as it is an
important topic in our current time of multicore processors and
multiprocessor systems.&lt;/p&gt;
&lt;p&gt;The topic has been discussed a lot of times but mainly from the
scientific point of view, where it's been used for speeding up
calulcations time.  I will not go into these use cases (e.g. using
MPI) but rather discuss it from web development point of view (e.g.
multi worker applications).&lt;/p&gt;
</summary></entry><entry><title>Parallel Python</title><link href="http://pyvideo.org/pycon-pl-2016/parallel-python.html" rel="alternate"></link><published>2016-10-14T00:00:00+00:00</published><updated>2016-10-14T00:00:00+00:00</updated><author><name>Michał Wysokiński</name></author><id>tag:pyvideo.org,2016-10-14:pycon-pl-2016/parallel-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many people believe that GIL completely rules out executing Python code
in parallel. It's true that GIL limits it to some extent, however the
rich ecosystem of Python modules not only allows that, but even offers
several ways of how it can be achieved. During the talk I will describe
these approaches together with their corresponding modules. I will also
briefly discuss when using parallelism in Python might be beneficial,
when to avoid it and what possible traps might be encountered during
parallel execution of Python code.&lt;/p&gt;
</summary></entry></feed>