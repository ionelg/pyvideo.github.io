<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_cesar-cardenas-desales.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-10-21T00:00:00+00:00</updated><entry><title>Writing and deploying serverless Python applications</title><link href="http://pyvideo.org/pycon-ireland-2017/writing-and-deploying-serverless-python-applications.html" rel="alternate"></link><published>2017-10-21T00:00:00+00:00</published><updated>2017-10-21T00:00:00+00:00</updated><author><name>Cesar Cardenas Desales</name></author><id>tag:pyvideo.org,2017-10-21:pycon-ireland-2017/writing-and-deploying-serverless-python-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk you’ll learn how to implement and deploy a basic serverless Python application.&lt;/p&gt;
&lt;p&gt;Serverless is a concept that has recently raised to popularity, boosted by the drive to financially optimize usage of computing power in cloud environments while reducing maintenance efforts. The following topics will be covered in this talk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is a serverless application?&lt;/li&gt;
&lt;li&gt;What are the benefits of the serverless execution model?&lt;/li&gt;
&lt;li&gt;What is AWS Lambda&lt;/li&gt;
&lt;li&gt;How to implement a basic Python serverless application with AWS Lambda?&lt;/li&gt;
&lt;li&gt;How to implement a serverless Python based Webservice using Zappa&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>So you "want" to maintain a Python legacy code base?</title><link href="http://pyvideo.org/pycon-pl-2016/so-you-want-to-maintain-a-python-legacy-code-base.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>César Cardenas Desales</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/so-you-want-to-maintain-a-python-legacy-code-base.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;While many programmers will agree that implementing new Software is
the most entertaining part of our jobs, the truth is that the vast
majority of developers spend a great amount of time performing
maintenance, which in an world that praises innovation 'is a dirty job
that somebody's gotta do'. In this talk I will describe a series of
techniques and Python tools that have proven useful for taking over a
legacy code base and getting it move forward, all within a well
defined process:&lt;/div&gt;
&lt;div class="line"&gt;1. Understand. Hold your horses! Don't touch that code yet, even it
you really want to. Understand the spirit of your project, its
architecture. Ask around, create personas, poll users, document the
product.&lt;/div&gt;
&lt;div class="line"&gt;2. Get yourself a safety net. Create lots of unit tests, pytest or
nose are your friends.&lt;/div&gt;
&lt;div class="line"&gt;3. Enhance. Start with small improvements, check and beautify your
code with tools such as flake8, pep8 and pylint, perform code reviews.&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Revisión de código en Python</title><link href="http://pyvideo.org/pycon-es-2015/revision-de-codigo-en-python.html" rel="alternate"></link><published>2016-02-02T00:00:00+00:00</published><updated>2016-02-02T00:00:00+00:00</updated><author><name>Cesar Cardenas Desales</name></author><id>tag:pyvideo.org,2016-02-02:pycon-es-2015/revision-de-codigo-en-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El objetivo de esta charla es dar a conocer los beneficios de la revisión de código, detallando los aspectos prácticos para llevar a cabo esta técnica de manera exitosa en proyectos colaborativos de desarrollo de software escritos en Python.&lt;/p&gt;
</summary><category term="Track Básico"></category><category term="code review"></category></entry></feed>