<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_tom-manderson.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-08-06T00:00:00+00:00</updated><entry><title>Gradual Typing in Python</title><link href="http://pyvideo.org/pycon-au-2017/gradual-typing-in-python.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Tom Manderson</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/gradual-typing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dynamically typed languages let you write a larger variety of programs than those with static types. Unfortunately, a lot of those are invalid. From version 3.5 onwards, Python has had a standardised system for adding types to your Python programs so you can increase your confidence in your code.&lt;/p&gt;
&lt;p&gt;By gradually adding types to your Python programs you can get the best of both worlds - add static types where they're useful, but retain the flexibility of dynamic typing where you want it. The talk covers a little of the history of typechecking in Python, some short demos, and a brief report on adding types to an existing project.&lt;/p&gt;
</summary></entry></feed>