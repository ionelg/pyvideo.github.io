<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_sam-kitajima-kimbrel.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2018-05-11T00:00:00+00:00</updated><entry><title>Bowerbirds of Technology: Architecture and Teams at Less-than-Google Scale</title><link href="http://pyvideo.org/pycon-us-2018/bowerbirds-of-technology-architecture-and-teams-at-less-than-google-scale.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Sam Kitajima-Kimbrel</name></author><id>tag:pyvideo.org,2018-05-11:pycon-us-2018/bowerbirds-of-technology-architecture-and-teams-at-less-than-google-scale.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Facebook, Google, Uber, LinkedIn, and friends are the rarefied heights of software engineering. They encounter and solve problems at scales shared by few others, and as a result, their priorities in production engineering and architecture are just a bit different from the rest of us down here in the other 99% of services. Through deconstructing a few blog posts from these giants, we’ll evaluate just what is it that they’re thinking about when they build systems and whether any of their choices are relevant to those of us operating at high scale yet still something less than millions of requests per second.&lt;/p&gt;
&lt;p&gt;This talk will go into depth on how to make technological decisions to meet your customers’ requirements without requiring a small army of engineers to answer 2 AM pages, and how to set realistic goals for your team around operations, uptime, communications, and disaster recovery.&lt;/p&gt;
&lt;p&gt;With these guidelines in mind, you should be better equipped to say no (or yes!) the next time your team’s software hipster proposes moving everything to the Next Big Thing.&lt;/p&gt;
</summary></entry><entry><title>How we designed an inclusivity-first conference on a shoestring budget and short timeline</title><link href="http://pyvideo.org/pycon-us-2018/how-we-designed-an-inclusivity-first-conference-on-a-shoestring-budget-and-short-timeline.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2018-05-11:pycon-us-2018/how-we-designed-an-inclusivity-first-conference-on-a-shoestring-budget-and-short-timeline.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Christopher Neugebauer, Josh Simmons, Sam Kitajima-Kimbrel&lt;/p&gt;
&lt;p&gt;New conferences rarely have resources to run the sort of outreach and inclusion programs that big conferences have. It’s hard to guess how much money you’ll have to spend, how many attendees you’ll have, and what your new community will look like. With so many things to worry about, it’s no surprise that most events don’t prioritise outreach until they’ve got a few years under their belt, if at all.&lt;/p&gt;
&lt;p&gt;It doesn’t have to be this way, and it can even be easier to build a new event around outreach and inclusion than it is to build it in later on!&lt;/p&gt;
&lt;p&gt;This talk shares the story of North Bay Python’s inaugural conference, which we planned in under 6 months, ran on a $40,000 budget, and built a welcoming community to make it real. We made inclusivity a founding principle and did so without compromising our speaker lineup while still attracting great sponsorship and hosted an event that almost every attendee wants to return to.&lt;/p&gt;
&lt;p&gt;In this talk, we’re going to share with you how we built a conference, from the ground up, to be as inclusive as we could make it. We’ll touch on early organisation, marketing, and on-the ground logistics. Throughout the talk, you’ll learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How we designed a budget that let us prioritise outreach and inclusion activities&lt;/li&gt;
&lt;li&gt;How we built the community that we wanted before the conference even started&lt;/li&gt;
&lt;li&gt;How we ran an event that proved that we meant everything we said&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You too can host a new conference with a great lineup on a shoestring budget and short timeline, and you can do it while being inclusive, welcoming, and putting attendee safety first. Find out how you can have your cake, eat it, and still have lots to share with your new community.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks - Sunday</title><link href="http://pyvideo.org/pycon-au-2017/lightning-talks-sunday.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Sam Kitajima-Kimbrel</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/lightning-talks-sunday.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Sam Kitajima-Kimbrel - You Aren't Facebook, and That's OK 0:19&lt;/li&gt;
&lt;li&gt;Jason King - Don't do what I did 4:55&lt;/li&gt;
&lt;li&gt;Evan Kohilas - Rubber Snaek 9:55&lt;/li&gt;
&lt;li&gt;Dr. Russell Keith-Magee - Tools for Apiarists 12:13&lt;/li&gt;
&lt;li&gt;William Brown - Hard CPUs Make Multithreading 17:23&lt;/li&gt;
&lt;li&gt;Allen Rueben - Joining the dots 21:54&lt;/li&gt;
&lt;li&gt;Malcolm Ramsay - How I Reinvented Solarized 24:16&lt;/li&gt;
&lt;li&gt;Zac Hatfield-Dodds - From REPL to reliable 26:47&lt;/li&gt;
&lt;li&gt;Daniel McCarthy - Hexapod and MicroPython 31:55&lt;/li&gt;
&lt;li&gt;Lilly Ryan - Towns I Wish I Could Visit 35:35&lt;/li&gt;
&lt;li&gt;Jeremy Rothstein - I'm a mockoholic 41:00&lt;/li&gt;
&lt;li&gt;Nick Moore - ESP32 and MicroPython 45:54&lt;/li&gt;
&lt;li&gt;Katie Bell - Hello 48:38&lt;/li&gt;
&lt;li&gt;Peter Hall - A Brief History of 'What is the Time?' 53:37&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category></entry><entry><title>One Data Pipeline to Rule Them All</title><link href="http://pyvideo.org/pycon-au-2017/one-data-pipeline-to-rule-them-all.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Sam Kitajima-Kimbrel</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/one-data-pipeline-to-rule-them-all.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are myriad data storage systems available for every use case imaginable, but letting application teams choose storage engines independently can lead to duplicated efforts and wheel reinvention. This talk will explore how to build a reusable data pipeline based on Kafka to support multiple applications, datasets, and use cases including archival, warehousing and analytics, stream and batch processing, and low-latency &amp;quot;hot&amp;quot; storage.&lt;/p&gt;
</summary></entry><entry><title>Bowerbirds of Technology: Architecture and Operations at Less-Than-Facebook Scale</title><link href="http://pyvideo.org/pycon-au-2017/bowerbirds-of-technology-architecture-and-operations-at-less-than-facebook-scale.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Sam Kitajima-Kimbrel</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/bowerbirds-of-technology-architecture-and-operations-at-less-than-facebook-scale.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Facebook, Google, Uber, LinkedIn, and friends are the rarefied heights of software engineering. They encounter and solve problems at scales shared by few others, and as a result, their priorities in production engineering and architecture are just a bit different from the rest of us down here in the other 99% of services. Even as a lead engineer for Twilio, I rarely deal with the same uncharted territories of scale explored by these truly massive systems. Through deconstructing a few blog posts from these giants, we’ll evaluate just what is it that they’re thinking about when they build systems, why they make the choices they do, and whether any of those choices are relevant to those of us operating at high scale yet still something less than millions of requests per second.&lt;/p&gt;
&lt;p&gt;This talk will go into depth on how to evaluate, choose, and deploy technology to meet your customers’ requirements without requiring a small army of engineers to answer 2 AM pages. We’ll go through what you should think about when picking open-source systems (as well as hosted PaaS/IaaS/SaaS providers) to meet your needs: maintainership, extensibility, security, stability, and more.&lt;/p&gt;
&lt;p&gt;We’ll also talk about how to pick realistic goals for your project and business: what are the implications of claiming five nines for the person carrying the pager? How will you communicate with your customers when you’re throwing errors and breaking SLAs? What does disaster recovery mean for your systems, and how much effort will it require to implement and test your DR plan (ahead of time!)?&lt;/p&gt;
&lt;p&gt;With these guidelines in mind, you should be better equipped to say no (or yes!) the next time your team’s software hipster proposes moving everything to the Next Big Thing.&lt;/p&gt;
</summary></entry><entry><title>One Data Pipeline to Rule Them All</title><link href="http://pyvideo.org/pycon-us-2017/one-data-pipeline-to-rule-them-all.html" rel="alternate"></link><published>2017-05-21T00:00:00+00:00</published><updated>2017-05-21T00:00:00+00:00</updated><author><name>Sam Kitajima-Kimbrel</name></author><id>tag:pyvideo.org,2017-05-21:pycon-us-2017/one-data-pipeline-to-rule-them-all.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are myriad data storage systems available for every use case
imaginable, but letting application teams choose storage engines
independently can lead to duplicated efforts and wheel reinvention. This
talk will explore how to build a reusable data pipeline based on Kafka
to support multiple applications, datasets, and use cases including
archival, warehousing and analytics, stream and batch processing, and
low-latency &amp;quot;hot&amp;quot; storage.&lt;/p&gt;
</summary></entry><entry><title>From Flying Circus to Holy Grail: Migrating the Twilio API from PHP to Python</title><link href="http://pyvideo.org/pycon-au-2016/from-flying-circus-to-holy-grail-migrating-the-twilio-api-from-php-to-python.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Sam Kitajima-Kimbrel</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/from-flying-circus-to-holy-grail-migrating-the-twilio-api-from-php-to-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sam Kitajima-Kimbrel
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/23/view_talk"&gt;https://2016.pycon-au.org/schedule/23/view_talk&lt;/a&gt;
Almost every software project of meaningful scale eventually runs into architectural problems. One of the larger issues we’ve dealt with at Twilio is an increasingly-brittle and hard-to-manage PHP codebase, originally responsible for running a website and public REST API. Rather than risk a from-scratch rewrite of the entire system, we chose to extract small and well-defined chunks one at a time into simple services using a common internal interface standard.&lt;/p&gt;
&lt;p&gt;Given a new fleet of services and a set of internal REST APIs, how do we get to parity with the existing public API specifications? Rather than force every service to implement authentication, data validation, rate-limiting, and so on, we chose to build a simple federation service to translate and proxy customer requests to internal systems. Python was a natural choice for this application due to its flexibility, extensive library and testing ecosystem, and suitability for rapid prototyping and development.&lt;/p&gt;
&lt;p&gt;But: how did we get from A to B? This talk will cover the details of Twilio’s past and current API architecture, how we adapted the service-oriented architecture pattern to build a consistent public interface, and the testing and deployment strategies we used to migrate 5 billion monthly requests from old to new systems with no downtime.&lt;/p&gt;
</summary></entry><entry><title>From Flying Circus to Holy Grail: migrating the Twilio REST API from PHP to Python</title><link href="http://pyvideo.org/pycon-ca-2015/from-flying-circus-to-holy-grail-migrating-the-api.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Sam Kitajima-Kimbrel</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/from-flying-circus-to-holy-grail-migrating-the-api.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Almost every software project of meaningful scale eventually runs into architectural problems. One of the larger issues we’ve dealt with at Twilio is an increasingly-brittle and hard-to-manage PHP codebase, originally responsible for running a website and public REST API. Over time, core business logic has been extracted from the legacy codebase into internal services fronted by a public REST API. This talk will explore how Python and Flask were used to build a simple proxying HTTP layer to handle all of Twilio’s API traffic and direct it to the appropriate internal systems. Along the way, we’ll cover why Python is well-suited to this application, ways to test code that’s replacing existing services, deployment strategies, and all of the benefits that came from migrating to more modern systems.&lt;/p&gt;
</summary></entry><entry><title>From Flying Circus to Holy Grail: Migrating the Twilio API from PHP to Python</title><link href="http://pyvideo.org/pyohio-2016/from-flying-circus-to-holy-grail-migrating-the-twilio-api-from-php-to-python.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Sam Kitajima-Kimbrel</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/from-flying-circus-to-holy-grail-migrating-the-twilio-api-from-php-to-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Legacy code is a hard problem for any growing application. Complete rewrites are expensive and prone to failure, so how &lt;em&gt;does&lt;/em&gt; one go about replacing that large, crufty codebase with something easier to maintain? We’ll discuss the strategies used at Twilio to migrate a large REST API, piece by piece, out of a monolithic PHP system into a fleet of services federated by a Python proxy layer.&lt;/p&gt;
</summary></entry></feed>