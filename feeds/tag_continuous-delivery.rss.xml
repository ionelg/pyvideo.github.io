<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Wed, 25 Oct 2017 00:00:00 +0000</lastBuildDate><item><title>From 0 to Continuous Delivery in 30 minutes.</title><link>http://pyvideo.org/pycon-de-2017/from-0-to-continuous-delivery-in-30-minutes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An introduction and hands on example how to start Continuous Delivery for python (or whatever) projects with conda and gitlab, which are open source, free to use, and if you wish even available as a cloud service.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, you wrote this neat software, which uses one or two cool 3rd party packages and now you have to get it running on your test or prod servers. Now you could check out your code and install the dependencies manually but that seems like a lot of wasted time, right? Shouldn't there be a more convenient way of doing this?&lt;/p&gt;
&lt;p&gt;Yes! And it's easier than you think! In this talk you'll learn how to build a Continuous Delivery pipeline for your python (or whatever) projects in 30 Minutes.&lt;/p&gt;
&lt;p&gt;In the beginning you'll get a quick introduction into the topic and the used tools, which are open source and free to use. For those who know a little about the subject: We will use conda (&lt;a class="reference external" href="https://conda.io"&gt;https://conda.io&lt;/a&gt;) to build the software package and for the dependency handling. GitLab.com will process the actual pipeline for us and Anaconda.com serves us with a package distribution channel.&lt;/p&gt;
&lt;p&gt;After that it's &amp;quot;hands on&amp;quot; time. We will go step by step trough the process. Starting with the creation of a little dummy program. Then extending the dummy in such manner that it can be build into a package. Afterwards we will create the pipeline and finally do a demo deploy. And if the gods of conference internet are merciful, you see all this as a live demonstration.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Wölfe</dc:creator><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-25:pycon-de-2017/from-0-to-continuous-delivery-in-30-minutes.html</guid><category>hands on</category><category>continuous delivery</category><category>devops</category><category>python</category><category>gitlab</category><category>conda</category></item><item><title>Continuous Delivery for Iot with Python and Iottly</title><link>http://pyvideo.org/pycon-italia-2017/continuous-delivery-for-iot-with-python-and-iottly.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We know, continuous delivery is one of the current buzzwords (much like
IoT was a couple of years ago). But think of an industrial IoT project
connecting thousands of remote and inaccessible devices which should be
kept secure and updated over time. Now, imagine you can just write
Python code for your devices, test it over-the-internet both locally in
the lab, and in a real test environment simply by pushing your code to
specific branches and finally just pushing to master to update the
entire fleet.&lt;/p&gt;
&lt;p&gt;During the talk we will use Iottly to showcase this continuous delivery
pattern for the internet of things, with live code and connected devices
(Raspberry Pi).&lt;/p&gt;
&lt;p&gt;Iottly is a Development and Management Cloud Service for IoT Projects,
built by TomorrowData. Iottly is written in Python and is open source
(github). It features a Python sandbox for the devices, an online editor
to program the devices over-the-internet, and the integration with git
as the base for continuous delivery.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Terna</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/continuous-delivery-for-iot-with-python-and-iottly.html</guid><category>raspberrypi</category><category>git</category><category>continuous-delivery</category><category>iot</category><category>over-the-air firmware upgrade</category><category>InternetOfThings</category><category>InternetDelleCose</category><category>github</category><category>IDE</category></item><item><title>Desplegando Python continuamente sin esfuerzo</title><link>http://pyvideo.org/pycon-es-2017/desplegando-python-continuamente-sin-esfuerzo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Los términos &amp;quot;despliegue continuo&amp;quot; e &amp;quot;integración continua&amp;quot; están cada vez más presentes en el léxico del programador. Si bien Python es un lenguaje tremendamente apropiado para aplicar estas prácticas, la cantidad de herramientas, opciones o, simplemente, de conceptos hace que el recién llegado alcance un nivel de confusión tal que la tarea parezca imposible. Usando herramientas habituales en Python mostraremos que construir un sistema de despliegue continuo es cómodo y sencillo.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ana López Pérez</dc:creator><pubDate>Sun, 24 Sep 2017 10:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-24:pycon-es-2017/desplegando-python-continuamente-sin-esfuerzo.html</guid><category>continuous integration</category><category>continuous delivery</category></item></channel></rss>