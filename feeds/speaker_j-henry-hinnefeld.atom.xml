<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_j-henry-hinnefeld.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-11-27T00:00:00+00:00</updated><entry><title>Git Risky Using git metadata to predict code bug risk</title><link href="http://pyvideo.org/pydata-new-york-city-2017/git-risky-using-git-metadata-to-predict-code-bug-risk.html" rel="alternate"></link><published>2017-11-27T00:00:00+00:00</published><updated>2017-11-27T00:00:00+00:00</updated><author><name>J. Henry Hinnefeld</name></author><id>tag:pyvideo.org,2017-11-27:pydata-new-york-city-2017/git-risky-using-git-metadata-to-predict-code-bug-risk.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Git is a powerful tool for code versioning. If you follow its best practices and have good ‘commit hygiene’ it can also be a source of valuable data about your coding practices. In this talk I’ll describe a system we built at Civis that uses the metadata git collects, along with its logging and ‘blaming’ functionality to score commits in real time on their likelihood of introducing a bug.&lt;/p&gt;
</summary></entry><entry><title>High Frequency Trading in MMORPG Markets using Luigi, Pandas, and Scikit learn</title><link href="http://pyvideo.org/pydata-chicago-2016/high-frequency-trading-in-mmorpg-markets-using-luigi-pandas-and-scikit-learn.html" rel="alternate"></link><published>2016-08-27T00:00:00+00:00</published><updated>2016-08-27T00:00:00+00:00</updated><author><name>J. Henry Hinnefeld</name></author><id>tag:pyvideo.org,2016-08-27:pydata-chicago-2016/high-frequency-trading-in-mmorpg-markets-using-luigi-pandas-and-scikit-learn.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
&lt;p&gt;In this talk I’ll describe the system I developed to implement a basic algorithmic trading strategy in the in-game market of an online, multi-player video game. Using this toy model, I’ll walk through the steps involved in setting up a data pipeline with Luigi, analyzing the resulting data with pandas, and identifying important factors and features with scikit-learn.&lt;/p&gt;
</summary><category term="scikit"></category></entry></feed>