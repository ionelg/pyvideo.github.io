<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_mahmoud-hashemi.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-10-07T00:00:00+00:00</updated><entry><title>The Packaging Gradient</title><link href="http://pyvideo.org/pybay-2017/the-packaging-gradient.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Mahmoud Hashemi</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/the-packaging-gradient.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Shipping any software can be hard if you don't know what you're getting into. An ergonomic, general-purpose language like Python can get you into complex packaging waters without you noticing. This talk presents a straightforward, example-driven guide to choosing among virtually every method in common use for packaging Python, scaling from wheels to PEX to Docker and more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Deployment is not the last step of development. Experienced engineers know to work backwards from deployment requirements, planning and designing for the reality of production environments.&lt;/p&gt;
&lt;p&gt;Python packaging sometimes gets a bad reputation, but a lot of this comes from less experienced engineers learning the hard way that implementation language does not dictate their packaging solutions.&lt;/p&gt;
&lt;p&gt;Packaging is all about target environment and deployment experience. Python was designed to be cross-platform and runs in countless environments. Python's built-in tools can't carry you anywhere you want to go. These days, I can write a mobile app in Python, but obviously people don't use pip to install it. More advanced codebases have to scale their packaging accordingly.&lt;/p&gt;
&lt;p&gt;This talk moves example by example, presenting shippable code, and the simplest packaging solution appropriate for it. All the examples are in Python, but the lessons are absolutely language agnostic. Learn the packaging gradient and put those deployment doubts to rest once and for all.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mahmoud Hashemi is a backend engineer and architect, open-source library maintainer, and Wikipedian. Newly building services and teams at shopkick, for many years, he built scalable enterprise Python services at PayPal, where he wrote technical essays and presented O'Reilly's Enterprise Software with Python. On the Wikipedia side of things, he's known for Listen to Wikipedia, Wikipedia Social Search, the Weeklypedia newsletter, the Wikipedia IFTTT channel, and much much more. He believes education is more than something you receive, and that every coder should be able to see one, do one, then teach one.&lt;/p&gt;
</summary></entry><entry><title>URLs: In Plain View</title><link href="http://pyvideo.org/pyconweb-2017/urls-in-plain-view.html" rel="alternate"></link><published>2017-05-27T00:00:00+00:00</published><updated>2017-05-27T00:00:00+00:00</updated><author><name>Mahmoud Hashemi</name></author><id>tag:pyvideo.org,2017-05-27:pyconweb-2017/urls-in-plain-view.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The web wouldn’t be the web without URLs. Unlike most web technology, URLs are not designed primarily to connect computers to each other. URLs connect us, people, to our software. This is an approachable engineering introduction to the often-overlooked URL, its evolution, and its many moving parts.&lt;/p&gt;
</summary></entry><entry><title>A Plug for Plugins</title><link href="http://pyvideo.org/pygotham-2017/a-plug-for-plugins.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Mahmoud Hashemi</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/a-plug-for-plugins.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The philosophy of small, focused software has its merits, but for most of us, software is big. From your browser to your kernel, the size of these applications is lost on most of us. How do these programs even grow to this size?&lt;/p&gt;
&lt;p&gt;In all of these cases, the answer involves an often-overlooked pattern: the plugin. Call them modules or extensions, if you'd prefer, but they are wildly successful. In fact, the only thing wider than the success of plugin-based architecture is the variety of implementations, especially in Python's dynamic environment.&lt;/p&gt;
&lt;p&gt;This talk covers the basis for plugins, reviews Python's current offerings using examples, and provides guidance as to the bright future of plugin architecture.&lt;/p&gt;
</summary></entry><entry><title>Python Profiling &amp; Performance: elementary to enterprise</title><link href="http://pyvideo.org/pybay-2016/python-profiling-performance-elementary-to-enterprise.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Mahmoud Hashemi</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/python-profiling-performance-elementary-to-enterprise.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk provides an end-to-end introduction and overview of Python performance practices, from fundamentals to functional industry practices to the future of performant Python. If you've ever felt lost in or out of touch with the constant whirl of Python performance advancements, this practical talk will put it back into perspective.
​
Abstract
Performance is a complex topic. It means a lot of things to a lot of people. Python gives us a great starting point: strong primitives and the &amp;quot;good enough&amp;quot; philosophy. But is Python actually good enough for performance-critical applications?&lt;/p&gt;
&lt;p&gt;This talk defines different kinds of performance, covers basic principles, and dives right into measurement. With those foundations laid, it outlines eight approaches to scaling Python, four of which are stack-agnostic and four of which are Python-specific. It outlines many examples from industry to promote a holistic view of performance as a practical process, not a large-scale benchmarking competition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Mahmoud Hashemi is Lead Developer of Python Infrastructure at PayPal, where he focuses on distributed systems, API design, and application security. He presented O'Reilly's Enterprise Software with Python, as well as several guides to topics from DNS to software versioning to statistics. An avid Wikipedian, Mahmoud is half of Hatnote, creators of Listen to Wikipedia and other fine wiki-based software.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/mahmoud-hashemi-python-profiling-and-performance-elementary-to-enterprise"&gt;https://speakerdeck.com/pybay2016/mahmoud-hashemi-python-profiling-and-performance-elementary-to-enterprise&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>