<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_python3.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2018-05-12T00:00:00+00:00</updated><entry><title>Python 2 to 3: How to Upgrade and What Features to Start Using</title><link href="http://pyvideo.org/pycon-us-2018/python-2-to-3-how-to-upgrade-and-what-features-to-start-using.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/python-2-to-3-how-to-upgrade-and-what-features-to-start-using.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The end of life for Python 2 is 2020. Python 3 is the future and you'll need to consider both your upgrade plan and what steps you'll take after upgrading to start leveraging Python 3 features.&lt;/p&gt;
&lt;p&gt;During this talk we'll briefly discuss how to start &lt;strong&gt;the process of upgrading your code to Python 3&lt;/strong&gt;. We'll then dive into some of &lt;strong&gt;the most useful Python 3 features&lt;/strong&gt; that you'll be able to start embracing once you drop Python 2 support.&lt;/p&gt;
&lt;p&gt;A number of the most powerful Python 3 features are syntactic features that are &lt;strong&gt;Python 3 only&lt;/strong&gt;. You won't get any experience using these features until you fully upgrade. These features are an incentive to drop Python 2 support in existing 2 and 3 compatible code. You can consider this talk as a teaser of Python 3 features that you may have never used.&lt;/p&gt;
&lt;p&gt;After this talk I hope you'll be inspired to fully upgrade your code to Python 3.&lt;/p&gt;
</summary><category term="python3"></category><category term="python3 migration"></category></entry><entry><title>Python 3: ten years later</title><link href="http://pyvideo.org/pycon-us-2018/python-3-ten-years-later.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Victor Stinner</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/python-3-ten-years-later.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Looking back at Python evolutions over the last 10 years.&lt;/p&gt;
&lt;p&gt;Python 3.0 was released ten years ago (December 2008). It's time to look back: analyze the migration from Python 2 to Python 3, see the progress we made on the language, list bugs by cannot be fixed in Python 2 because of the backward compatibility, and discuss if it's time or not to bury Python 2.&lt;/p&gt;
&lt;p&gt;Python became the defacto language in the scientific world and the favorite programming language as the first language to learn programming.&lt;/p&gt;
</summary><category term="python3"></category></entry><entry><title>Python, Locales and Writing Systems</title><link href="http://pyvideo.org/pycon-us-2018/python-locales-and-writing-systems.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Rae Knowler</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/python-locales-and-writing-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3 removes a lot of the confusion around Unicode handling in Python, but that by no means fixes everything. Different locales and writing systems have unique behaviours that can trip you up. Here’s some of the worst ones and how to handle them correctly.&lt;/p&gt;
</summary><category term="python3"></category><category term="unicode"></category></entry><entry><title>Programming the Web of Things with Python and MicroPython</title><link href="http://pyvideo.org/pycon-de-2017/programming-the-web-of-things-with-python-and-micropython.html" rel="alternate"></link><published>2017-10-25T00:00:00+00:00</published><updated>2017-10-25T00:00:00+00:00</updated><author><name>Hardy Erlinger</name></author><id>tag:pyvideo.org,2017-10-25:pycon-de-2017/programming-the-web-of-things-with-python-and-micropython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Hardy Erlinger&lt;/strong&gt; is an experienced freelance developer from Munich. He has been writing web applications for 15 years using a lot of different technologies along the way. He has been actively involved with technical communities for most of his career and likes to experiment with electronic devices in his mad scientist lab.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this session you will get a gentle introduction to the ever-expanding world of small programmable devices: learn to use single board computers and microcontrollers to connect to sensors and talk to APIs - all using Python or MicroPython, a subset of Python 3 for use in constrained environments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Small single board computers such as the Raspberry Pi have made physical computing available to interested makers around the world. It is highly affordable, runs Linux and can be programmed using Python. But if all you want is to read a few sensors, the Pi's specs are overkill; and once your sensors are out in the field (sometimes even literally), power consumption suddenly becomes an issue. Many specialized devices with very low power requirements are available but historically you were constrained to using C to develop for them. Enter MicroPython, a subset of Python 3 designed for use on tiny devices with very limited resources.&lt;/p&gt;
&lt;p&gt;In this session you will be introduced to the basics of physical computing and the joys (and some of the pains) of writing Python code for devices that weigh less than a piece of chewing gum but still have the power to communicate with web APIs, act as wireless access points, even host a small web server, and more.&lt;/p&gt;
&lt;p&gt;The purpose of this session is to share some of the fun and excitement that can be had doing physical computing with Python. No prior experience with electronics is assumed or required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</summary><category term="micropython"></category><category term="python3"></category></entry><entry><title>Crash test of Django ORM</title><link href="http://pyvideo.org/pycon-italia-2017/crash-test-of-django-orm.html" rel="alternate"></link><published>2017-04-09T00:00:00+00:00</published><updated>2017-04-09T00:00:00+00:00</updated><author><name>Andrii Soldatenko</name></author><id>tag:pyvideo.org,2017-04-09:pycon-italia-2017/crash-test-of-django-orm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The world is swimming in articles and books about Django and Django ORM
itself. All this sources cover only basic use cases of Django ORM
comparing to real world examples. This talk is dedicated to the
proposition to crash test Django ORM 80% of functionalities in 20% of
the time. Also I’m going to show the important features and capabilities
of Django ORM compare to most of SQL features. Traditionally, ORM is
presented in a “bottom-up” fashion, but I would like to propose
approach, on the other hand, is “top-down”. We begin by identifying a
rather short list of standard questions, or precisely types of
questions, that are often asked of relations databases. We then show how
these standard questions are posted in Django ORM, introducing and
motivating the use of its capabilities and features as they become
relevant.&lt;/p&gt;
</summary><category term="django-orm"></category><category term="performance"></category><category term="postgresql"></category><category term="python3"></category><category term="django"></category></entry><entry><title>Python e swift: linguaggi a confronto</title><link href="http://pyvideo.org/pycon-italia-2017/python-e-swift-linguaggi-a-confronto.html" rel="alternate"></link><published>2017-04-09T00:00:00+00:00</published><updated>2017-04-09T00:00:00+00:00</updated><author><name>Lelio Campanile</name></author><id>tag:pyvideo.org,2017-04-09:pycon-italia-2017/python-e-swift-linguaggi-a-confronto.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Quando Apple decise di affiancare all’objective C un altro linguaggio
per consentire lo sviluppo di app sulla piattaforma iOS, moltissime voci
di corridoio davano python per essere stato scelto per questo.&lt;/p&gt;
&lt;p&gt;Come sappiamo alla fine non è andata così, ma è stato creato un
linguaggio totalmente nuovo: Swift.&lt;/p&gt;
&lt;p&gt;In questo talk andremo a scoprire affinità e differenze tra python e
swift.&lt;/p&gt;
</summary><category term="Python"></category><category term="Swift"></category><category term="python3"></category></entry><entry><title>Affrontare le sfide del cambiamento climatico con Python</title><link href="http://pyvideo.org/pycon-italia-2017/affrontare-le-sfide-del-cambiamento-climatico-con-python.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/affrontare-le-sfide-del-cambiamento-climatico-con-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Che si intenda pianificare una attività industriale di lungo periodo,
come costruire un complesso sciistico, o semplicemente scegliere il
periodo ideale per le vacanze ai tropici è essenziale avere previsioni
affidabili sulle condizioni climatiche che si incontreranno. Cosa non
banale in un mondo in cui il clima sta cambiando.&lt;/p&gt;
&lt;p&gt;Il &lt;a class="reference external" href="http://climate.copernicus.eu"&gt;servizio per il monitoraggio del cambiamento climatico del programma
europeo Copernicus&lt;/a&gt; si avvia a
diventare la principale piattaforma per l’accesso e l’analisi dei dati
climatici in Europa il cui cuore, il Climate Data Store Toolbox, è
interamente basato su Python 3 e sullo stack di tecnologie del PyData
con l’aggiunta di tool specifici per trattare dati che riguardano
l’atmosfera.&lt;/p&gt;
&lt;p&gt;In questo talk presenterò i dati e gli strumenti di accesso e analisi
già disponibili e la roadmap verso il sistema completo attraverso
l’implementazione di vari casi d’uso.&lt;/p&gt;
</summary><category term="climate-change"></category><category term="notebook"></category><category term="python3"></category><category term="pydata"></category></entry><entry><title>Building Serverless applications with Python</title><link href="http://pyvideo.org/pycon-italia-2017/building-serverless-applications-with-python.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Andrii Soldatenko</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/building-serverless-applications-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Serverless applications in Python sounds, strange isn’t? In this talk
I’ll explain how to build not only crop images or select data from
DynamoDB, but build real application, what kind of troubles are we
should expect, how to make decision is your task fit into serverless
architecture in Python or may be you should use, general approach. How
fast serverless applications written in Python, and more important how
to scale it.&lt;/p&gt;
</summary><category term="serverless"></category><category term="aws"></category><category term="lambda-functions"></category><category term="python3"></category></entry><entry><title>Ricerca full text in Django con PostgreSQL</title><link href="http://pyvideo.org/pycon-italia-2017/ricerca-full-text-in-django-con-postgresql.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Paolo Melchiorre</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/ricerca-full-text-in-django-con-postgresql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dalla versione 1.10 di &lt;strong&gt;Django&lt;/strong&gt; è presente il modulo che facilita
l’utilizzo del motore di &lt;strong&gt;ricerca full text&lt;/strong&gt; di PostgreSQL. Dal
momento che &lt;strong&gt;PostgreSQL&lt;/strong&gt; è utilizzato in molti progetti Django,
sfruttare il suo motore di ricerca full text permette di avere questa
funzionalità molto facilmente, senza dover configurare prodotti esterni
e senza doversi preoccupare di mantenere sincronizzati i dati tra
differenti sistemi. Vedremo come abbiamo sfruttato questa funzionalità
di ricerca full text in un &lt;strong&gt;progetto reale&lt;/strong&gt;.&lt;/p&gt;
</summary><category term="Full Text Search"></category><category term="search"></category><category term="postgresql"></category><category term="python3"></category><category term="django"></category></entry><entry><title>Solving the web most popular code shortening competition with Python 3</title><link href="http://pyvideo.org/pycon-italia-2017/solving-the-web-most-popular-code-shortening-competition-with-python-3.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/solving-the-web-most-popular-code-shortening-competition-with-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“Code shortening” is the “sport” where participants strive to achieve
the shortest possible source code that solves a programming problem by
exploiting all the tricks and quirks of the language.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://www.spoj.com/problems/SIZECON"&gt;SIZECON problem&lt;/a&gt; on SPOJ
is one of the oldest and most popular code shortening problems on the
web with a bizarre twist, only character above ASCII value 32 are
counted for the penalty. During the talk we will take a journey into
some frightening depths of the Python language in order to write shorter
and shorter solutions to SIZECON until, exploiting a number of
mind-blowing tricks, we will reach the current record solution for
Python 3 of 31 characters.&lt;/p&gt;
&lt;p&gt;I promise I’ll show you the most obfuscated, contrived and sick python
code you have ever seen and (hopefully!) will ever see. I invite
participants to give &lt;a class="reference external" href="http://www.spoj.com/problems/SIZECON"&gt;SIZECON&lt;/a&gt;
a try and check their score against the &lt;a class="reference external" href="http://www.spoj.com/ranks/SIZECON/lang=PYTH%203.2.3"&gt;Python3
rankings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is an updated version of a talk I presented during Europython 2015
and that had an unexpected success both on-site and on social media. The
talk is now centred on Python 3 shorting tricks and is has been reworked
to be much more easy to follow.&lt;/p&gt;
</summary><category term="coding-competitions"></category><category term="fun-and-humor"></category><category term="python3"></category></entry><entry><title>PyPy Status Update</title><link href="http://pyvideo.org/pycon-italia-2017/pypy-status-update.html" rel="alternate"></link><published>2017-04-07T00:00:00+00:00</published><updated>2017-04-07T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2017-04-07:pycon-italia-2017/pypy-status-update.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The goal of this talk is to present the latest news in the PyPy world.
In particular, I will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the current status of PyPy, including performance and compatibility
w.r.t CPython&lt;/li&gt;
&lt;li&gt;the status of NumPy and in general of the scientific stack: what
works, what doesn’t, the speed and compatibility tradeoffs, etc.&lt;/li&gt;
&lt;li&gt;the status Python 3 on PyPy&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="performance"></category><category term="JIT"></category><category term="pypy"></category><category term="python3"></category><category term="numpy"></category></entry><entry><title>Svilluppare con python sull'iPad</title><link href="http://pyvideo.org/pycon-italia-2017/svilluppare-con-python-sullipad.html" rel="alternate"></link><published>2017-04-07T00:00:00+00:00</published><updated>2017-04-07T00:00:00+00:00</updated><author><name>Lelio Campanile</name></author><id>tag:pyvideo.org,2017-04-07:pycon-italia-2017/svilluppare-con-python-sullipad.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Da quando è stato introdotto l’iPad, questo si è evoluto velocemente,
trasformandosi da un iPhone agli steroidi ad un surrogato di computer
ultraportatile. Questo mi ha spinto ad esplorare la piattaforma per
vedere fino a che punto ci si poteva spingere nell’utilizzo di un iPad
come sostituto di un ultra portatile: volevo poter sviluppare con python
anche su un iPad.&lt;/p&gt;
&lt;p&gt;Finalmente dopo molte ricerche scopro l’app Pythonista che consente di
sviluppare in python sull’iPad e senza alcun jailbreak, secondo le
regole della Apple!&lt;/p&gt;
&lt;p&gt;Vi voglio far conoscere questo strumento con il quale potrete sviluppare
script python per automatizzare il vostro lavoro sull’iPad, fare test al
volo di codici anche quando non avete un pc, utilizzare l’iPad per le
vostre ricerche scientifiche (grazie al supporto di numpy e matplotlib)
ad adirittura scrivere app con una gui che potrete pubblicare sull’app
store!!!&lt;/p&gt;
</summary><category term="Python"></category><category term="IDE"></category><category term="python3"></category><category term="matplotlib"></category><category term="pydata"></category></entry><entry><title>Vintage 1978 Superboard II hacking with some Python3 and ZeroMQ</title><link href="http://pyvideo.org/chipy/vintage-1978-superboard-ii-hacking-with-some-pyth.html" rel="alternate"></link><published>2011-01-13T00:00:00+00:00</published><updated>2011-01-13T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2011-01-13:chipy/vintage-1978-superboard-ii-hacking-with-some-pyth.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I'm not sure if we're still looking for talks on Thursday, but if so,
I'd like to volunteer to give a talk about using Python to do some
retro-computing hacking involving my vintage 1978 Superboard II. It's
not exactly robotics, but it involves hardware and a lot of low-level
hacking (along with some Python3 and ZeroMQ thrown in for good measure
;-).&lt;/p&gt;
</summary><category term="chipy"></category><category term="cool"></category><category term="python3"></category><category term="zeromq"></category></entry><entry><title>Changes to the GIL in Python 3</title><link href="http://pyvideo.org/chipy/changes-to-the-gil-in-python-3.html" rel="alternate"></link><published>2010-01-14T00:00:00+00:00</published><updated>2010-01-14T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2010-01-14:chipy/changes-to-the-gil-in-python-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Follow-up to David's last GIL talk in June 2009. This presentation walks
through changes to the GIL that are being made.&lt;/p&gt;
</summary><category term="chipy"></category><category term="gil"></category><category term="python3"></category></entry><entry><title>Blender 2.5 loves Python 3</title><link href="http://pyvideo.org/chipy/blender-2-5-loves-python-3.html" rel="alternate"></link><published>2009-10-08T00:00:00+00:00</published><updated>2009-10-08T00:00:00+00:00</updated><author><name>Christopher Allan Webber</name></author><id>tag:pyvideo.org,2009-10-08:chipy/blender-2-5-loves-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Blender 2.5 loves Python 3&lt;/p&gt;
&lt;p&gt;Presented by Chris Webber on October 8th, 2009&lt;/p&gt;
&lt;p&gt;Chris talks about the upcoming Blender 2.5 release. &amp;quot;Blender 2.5 is the
first app I know of that &lt;em&gt;requires&lt;/em&gt; Python 3.X. So that's pretty
interesting on its own. But there's plenty more interesting stuff to
discuss. It's going to be mostly an overview talk. Blender's python
integration could possibly span 3 separate talks, especially considering
the blender game engine's use of it, which is a separate but interesting
talk.&amp;quot;&lt;/p&gt;
&lt;p&gt;ChiPy is a group of Chicago Python Programmers, l33t, and n00bs.
Meetings are held monthly at various locations around Chicago. Also,
ChiPy is a proud sponsor of many Open Source and Educational efforts in
Chicago. Stay tuned to the mailing list for more info. &lt;a class="reference external" href="http://chipy.org/"&gt;ChiPy
website&lt;/a&gt;&lt;/p&gt;
</summary><category term="blender"></category><category term="chipy"></category><category term="chriswebber"></category><category term="python3"></category></entry><entry><title>Panel: Python 3</title><link href="http://pyvideo.org/pycon-au-2011/panel-python-3.html" rel="alternate"></link><published>2011-08-23T00:00:00+00:00</published><updated>2011-08-23T00:00:00+00:00</updated><author><name>Nick Coghlan</name></author><id>tag:pyvideo.org,2011-08-23:pycon-au-2011/panel-python-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This is a panel discussion in which Nick Coghlan, Raymond Hettinger and
Richard Jones discuss the state of Python 3, some of the new features,
the 3rd party adoption, migration strategies and open to the floor for
questions.&lt;/p&gt;
</summary><category term="migration"></category><category term="python3"></category></entry><entry><title>Python 3.3</title><link href="http://pyvideo.org/pycon-de-2012/python-3-3.html" rel="alternate"></link><published>2012-10-31T00:00:00+00:00</published><updated>2012-10-31T00:00:00+00:00</updated><author><name>Martin v. Löwis</name></author><id>tag:pyvideo.org,2012-10-31:pycon-de-2012/python-3-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Am 29.9.2012 wurde nach 19-monatiger Entwicklungszeit Python 3.3&lt;/p&gt;
&lt;p&gt;fertiggestellt. Es ist die größte Erweiterung von Python seit Version&lt;/p&gt;
&lt;p&gt;3.0; Änderungen gab es in allen Bereichen der Implementierung (Syntax,&lt;/p&gt;
&lt;p&gt;Standardbibliothek, Paketierung, interne Strukturen). In dem Vortrag&lt;/p&gt;
&lt;p&gt;werden die wesentlichen Änderungen umrissen, sowohl aus Anwendersicht&lt;/p&gt;
&lt;p&gt;wie auch aus Sicht eines core committers.&lt;/p&gt;
</summary><category term="python"></category><category term="python3"></category></entry><entry><title>Mastering Python 3 I/O (part 1)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--mastering-python-3-i-o.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--mastering-python-3-i-o.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mastering Python 3 I/O&lt;/p&gt;
&lt;p&gt;Presented by David Beazley&lt;/p&gt;
&lt;p&gt;As most Python programmers know, Python 3 breaks backwards compatibility
with Python 2 in a number of significant ways. Although guides to Python
3 tend to focus on superficial incompatibilities such as the new print
function, changes to exception handling, or new language features, the
most substantial changes concern the strict separation of Unicode and
bytes as well as the new I/O stack. Not only do these changes have
far-reaching effects throughout the standard library, but changes to I/O
are likely to be the most major source of problems for anyone porting an
existing Python application to Python 3. In this tutorial, we're going
to take a top-to-bottom tour of the entire Python 3 I/O system. We'll
focus on how to properly handle both text and binary data, changes to
standard library modules, examine advanced features such as the buffer
API, perform some performance experiments, and end with practical advice
for programmers working on porting applications from Python 2 to 3.
Intended Audience&lt;/p&gt;
&lt;p&gt;Intermediate to advanced Python programmers who are either developing
new applications or contemplating a migration to Python 3. Attendees
should already be familiar with the basics of Python programming
including standard datatypes and commonly used library modules. A
background in systems programming topics such as file handling,
subprocesses, and socket programming is also recommended. Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introducing Python 3 (with a focus on I/O)&lt;/li&gt;
&lt;li&gt;Text Processing&lt;/li&gt;
&lt;li&gt;Binary Data Handling&lt;/li&gt;
&lt;li&gt;Dealing with System Interfaces and External Programs&lt;/li&gt;
&lt;li&gt;The New io library&lt;/li&gt;
&lt;li&gt;Network programming&lt;/li&gt;
&lt;li&gt;The revised buffer API and direct I/O&lt;/li&gt;
&lt;li&gt;Porting from Python 2 to 3.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="io"></category><category term="pycon"></category><category term="pycon2010"></category><category term="python3"></category><category term="tutorial"></category></entry><entry><title>Pynie: Python 3 on Parrot (#148)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--pynie--python-3-on-parrot---148.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Allison Randal</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--pynie--python-3-on-parrot---148.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pyine: Python 3 on Parrot&lt;/p&gt;
&lt;p&gt;Presented by Allison Randal&lt;/p&gt;
&lt;p&gt;Pynie is an implementation of Python 3 on Parrot. The goal of Pynie is
to duplicate the pure-Python behavior of CPython 3.x, and perhaps
eventually a C API compatibility layer. Parrot provides a set of
compiler tools and core functionality common to many dynamic languages,
so the core code of Pynie is lightweight. Pynie allows Python 3
libraries to be shared between multiple languages. This talk is an
overview of the features Pynie currently supports and the work left to
be done, together with an introduction to the internals of Pynie.&lt;/p&gt;
</summary><category term="parrot"></category><category term="pycon"></category><category term="pycon2010"></category><category term="pyine"></category><category term="python3"></category></entry><entry><title>Python 3: The Next Generation (#48)</title><link href="http://pyvideo.org/pycon-us-2010/pycon-2010--python-3--the-next-generation---48.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Wesley J. Chun</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-3--the-next-generation---48.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3: The Next Generation&lt;/p&gt;
&lt;p&gt;Presented by Wesley J. Chun&lt;/p&gt;
&lt;p&gt;This talk is about the evolution of Python. We will discuss Python 2 and
Python 3: what the compatibility issues are, what the main differences
are, and also talk about migration, Python 2.6, and other transition
tools.&lt;/p&gt;
</summary><category term="2to3"></category><category term="pycon"></category><category term="pycon2010"></category><category term="python3"></category></entry><entry><title>Saturday Morning Lightning Talks</title><link href="http://pyvideo.org/pycon-us-2011/pycon-2011--saturday-morning-lightning-talks.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--saturday-morning-lightning-talks.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Saturday morning lightning talks&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Saturday Morning Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 Alfredo Deza - Faster VIM Python Editing
(&lt;a class="reference external" href="https://github.com/alfredodeza/chapa.vim"&gt;github.com/alfredodeza/chapa.vim&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;03:40 Dean Hall - Python-on-a-chip
(&lt;a class="reference external" href="http://pythononachip.org/"&gt;pythononachip.org&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;07:55 Ned Batchelder - Cog will make you happy
(&lt;a class="reference external" href="http://nedbatchelder.com/code/cog"&gt;nedbatchelder.com/code/cog&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;13:55 Brett Cannon - (Some of) your PSF money at work&lt;/li&gt;
&lt;li&gt;21:10 Baiju Muthukaden - GetPython3.net
(&lt;a class="reference external" href="http://getpython3.net/"&gt;getpython3.net&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;25:20 Shai Ben-yehuda - Light-weight UI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[VIDEO HAS ISSUES: slides for Alfredo's and Ned's talks are impossible
to read.]&lt;/p&gt;
</summary><category term="lightning talks"></category><category term="chapa.vim"></category><category term="cog"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pymite"></category><category term="python3"></category><category term="pythononachip"></category><category term="vim"></category></entry><entry><title>Status of Unicode in Python 3</title><link href="http://pyvideo.org/pycon-us-2011/pycon-2011--status-of-unicode-in-python-3.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Victor Stinner</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--status-of-unicode-in-python-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Introduced in Python 2.0, unicode became the default string type in
Python 3.0. It took 8 years to switch to unicode, and since Python 3.0,
a lot of bugs has been fixed. The switch to unicode opened many
questions. Should Python support both bytes and characters for
filenames? What to do with undecodable bytes? etc.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will focus on the recent issues fixed in Python 3.1 and 3.2:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use the PEP 383 (error handler to store undecodable bytes) everywhere&lt;/li&gt;
&lt;li&gt;Encoding of the command line arguments: utf-8 on Mac OS X, locale
encoding on UNIX/BSD, unicode on Windows&lt;/li&gt;
&lt;li&gt;Environment variables: creation of os.environb&lt;/li&gt;
&lt;li&gt;Filenames: huge work to support the PEP 383 everywhere, creation of
os.fsencode() and os.fsdecode()&lt;/li&gt;
&lt;li&gt;Python source code encoding: use tokenize.detect_encoding() instead
of the locale encoding&lt;/li&gt;
&lt;li&gt;some library examples: email, ftp, ...&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk will present not only the changes in Python, but also in the C
API.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="python3"></category><category term="unicode"></category></entry><entry><title>Python 3: the next generation is here already</title><link href="http://pyvideo.org/pycon-us-2011/python-3-the-next-generation-is-here-already.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Wesley J. Chun</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/python-3-the-next-generation-is-here-already.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3: the next generation is here already&lt;/p&gt;
&lt;p&gt;Presented by wesley chun&lt;/p&gt;
&lt;p&gt;This talk is about the evolution of Python. We will discuss Python 2 and
Python 3: what the compatibility issues are, what the main differences
are, and also talk about migration, Python 2.6/2.7, and other transition
tools.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Python is currently at a crossroads: Python 2 has taken it from a quiet
word- of-mouth language to primetime, with many companies around the
world using it and an ever-increasing global marketshare of the
programming world. But now comes Python 3, the first version of the
language that is not backwards compatible with previous releases.&lt;/p&gt;
&lt;p&gt;What does this mean? Are all my Python programs going to break? Will I
have to rewrite everything? How much time do I have? When is Python 2
going to be EOL'd? Is the language undergoing a complete rewrite and
will I even recognize it? What are the changes between Python 2 and 3
anyway? Also, the next generation is already here, as Python 3 is over
two years old now. What has been ported so far, and what is its current
status? Are migration plans or transition tools available? If I want to
start learning Python, should I do Python 2 or Python 3? Are all Python
2 books obsolete?&lt;/p&gt;
&lt;p&gt;We will attempt to answer all of these questions and more. Join us!&lt;/p&gt;
&lt;p&gt;OUTLINE/TOPICS&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2 vs. Python 3&lt;/li&gt;
&lt;li&gt;Introduction to Python 3&lt;/li&gt;
&lt;li&gt;Backwards Compatibility&lt;/li&gt;
&lt;li&gt;Generational Changes&lt;/li&gt;
&lt;li&gt;Key Differences&lt;/li&gt;
&lt;li&gt;Role of Remaining Python 2.x releases&lt;/li&gt;
&lt;li&gt;Transition &amp;amp; Migration Plans &amp;amp; Tools&lt;/li&gt;
&lt;li&gt;Futures&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="2to3"></category><category term="pycon"></category><category term="pycon2011"></category><category term="python2"></category><category term="python3"></category></entry><entry><title>Transforming Code into Beautiful, Idiomatic Python</title><link href="http://pyvideo.org/pycon-us-2013/transforming-code-into-beautiful-idiomatic-pytho.html" rel="alternate"></link><published>2013-03-15T00:00:00+00:00</published><updated>2013-03-15T00:00:00+00:00</updated><author><name>Raymond Hettinger</name></author><id>tag:pyvideo.org,2013-03-15:pycon-us-2013/transforming-code-into-beautiful-idiomatic-pytho.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn to take better advantage of Python's best features and improve
existing code through a series of code transformations, &amp;quot;When you see
this, do that instead.&amp;quot;&lt;/p&gt;
&lt;p&gt;Timetable:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=184s"&gt;03:04&lt;/a&gt; -- Looping over a range of functions&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=287s"&gt;04:47&lt;/a&gt; -- Looping over a collection&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=328s"&gt;05:28&lt;/a&gt; -- Looping backwards&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=411s"&gt;06:51&lt;/a&gt; -- Looping over a collection of indicies&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=456s"&gt;07:36&lt;/a&gt; -- Looping over two collections&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=582s"&gt;09:42&lt;/a&gt; -- Looping in sorted order&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=604s"&gt;10:04&lt;/a&gt; -- Custom sort order&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=747s"&gt;12:27&lt;/a&gt; -- Call a function until a sentinel value&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=952s"&gt;15:52&lt;/a&gt; -- Distinguishing multiple exit points in loops&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1158s"&gt;19:18&lt;/a&gt; -- Looping over dictionary keys&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1270s"&gt;21:10&lt;/a&gt; -- Looping over dictionary keys and values&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1312s"&gt;21:52&lt;/a&gt; -- Construct a dictionary from pairs&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1395s"&gt;23:15&lt;/a&gt; -- Counting with dictionaries&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1530s"&gt;25:30&lt;/a&gt; -- Grouping with dictionaries&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1677s"&gt;27:57&lt;/a&gt; -- Is a dictionary pop() atomic?&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1752s"&gt;29:12&lt;/a&gt; -- Linking dictionaries&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1870s"&gt;31:10&lt;/a&gt; -- Clarify function calls with keyword arguments&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1937s"&gt;32:17&lt;/a&gt; -- Clarify multiple return values with named tuples&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1993s"&gt;33:13&lt;/a&gt; -- Unpacking sequences&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2041s"&gt;34:01&lt;/a&gt; -- Updating multiple state variables&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2175s"&gt;36:15&lt;/a&gt; -- Simultaneous state updates&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2304s"&gt;38:24&lt;/a&gt; -- Concatenating strings&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2321s"&gt;38:41&lt;/a&gt; -- Updating sequences&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2397s"&gt;39:57&lt;/a&gt; -- Using decorators to factor-out administrative logic&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2424s"&gt;40:24&lt;/a&gt; -- Caching decorator&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2479s"&gt;41:19&lt;/a&gt; -- Factor-out temporary contexts for decimal&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2521s"&gt;42:01&lt;/a&gt; -- How to open and close files&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2545s"&gt;42:25&lt;/a&gt; -- How to use locks&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2590s"&gt;43:10&lt;/a&gt; -- Factor-out temporary contexts&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2696s"&gt;44:56&lt;/a&gt; -- Context manager: redirect_stdout()&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2764s"&gt;46:04&lt;/a&gt; -- Concise expressive one-liners&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="talk"></category><category term="python3"></category><category term="pythonic"></category></entry></feed>