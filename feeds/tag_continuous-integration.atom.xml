<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/tag_continuous-integration.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-09-24T10:00:00+02:00</updated><entry><title>Ansible roles, private git repos and the Ansible Galaxy tool</title><link href="http://pyvideo.org/pycon-italia-2017/ansible-roles-private-git-repos-and-the-ansible-galaxy-tool.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>serena lorenzini</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/ansible-roles-private-git-repos-and-the-ansible-galaxy-tool.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ansible is a python tool that automates the management of an IT
infrastructure. It is easy to learn but rushing to use it with a limited
knowledge of its best practices leads to not reusable code.&lt;/p&gt;
&lt;p&gt;Creating reusable Ansible roles is a strongly encouraged practice, in
fact there is a tool designed just for this purpose: Ansible Galaxy. It
comes bundled with Ansible and its purpose is to download roles from the
Galaxy hub and other sources.&lt;/p&gt;
&lt;p&gt;This talk wants to show how we manage our Ansible roles and their
dependencies in a consistent way by means of Ansible Galaxy. It will
also offer an overview of how Ansible roles can be tested.&lt;/p&gt;
</summary><category term="config-ninja"></category><category term="continuous-integration"></category><category term="command-line"></category><category term="gitlab"></category><category term="ansible"></category><category term="best-practices"></category></entry><entry><title>Desplegando Python continuamente sin esfuerzo</title><link href="http://pyvideo.org/pycon-es-2017/desplegando-python-continuamente-sin-esfuerzo.html" rel="alternate"></link><published>2017-09-24T10:00:00+02:00</published><updated>2017-09-24T10:00:00+02:00</updated><author><name>Ana López Pérez</name></author><id>tag:pyvideo.org,2017-09-24:pycon-es-2017/desplegando-python-continuamente-sin-esfuerzo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Los términos &amp;quot;despliegue continuo&amp;quot; e &amp;quot;integración continua&amp;quot; están cada vez más presentes en el léxico del programador. Si bien Python es un lenguaje tremendamente apropiado para aplicar estas prácticas, la cantidad de herramientas, opciones o, simplemente, de conceptos hace que el recién llegado alcance un nivel de confusión tal que la tarea parezca imposible. Usando herramientas habituales en Python mostraremos que construir un sistema de despliegue continuo es cómodo y sencillo.&lt;/p&gt;
</summary><category term="continuous integration"></category><category term="continuous delivery"></category></entry><entry><title>Vom Commit zum Deployment - Build pipelines in Jenkins</title><link href="http://pyvideo.org/pycon-de-2013/vom-commit-zum-deployment-build-pipelines-in-je.html" rel="alternate"></link><published>2013-10-15T00:00:00+00:00</published><updated>2013-10-15T00:00:00+00:00</updated><author><name>Thomas Fenzl</name></author><id>tag:pyvideo.org,2013-10-15:pycon-de-2013/vom-commit-zum-deployment-build-pipelines-in-je.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Wenn man Code in ein Repository eincheckt möchte man dazu schnelles und
aussagekräftiges Feedback.&lt;/p&gt;
&lt;p&gt;Natürlich sind lokal die Tests durchgelaufen (oder etwa nicht?), aber
wie kann man weitere Überprüfungen automatisieren? Dieser Vortrag zeigt,
wie man in Jenkins und Werkzeugen wie nose/pylint/coverage build
pipelines anlegt, die von Unittests und linting bis zum Deployment gehen
können.&lt;/p&gt;
</summary><category term="build pipeline"></category><category term="continuous integration"></category></entry></feed>