<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Fri, 27 Oct 2017 12:30:00 +0100</lastBuildDate><item><title>Understanding Natural Language using Word Vectors</title><link>http://pyvideo.org/pycon-ireland-2017/understanding-natural-language-using-word-vectors.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is an introduction to word vectors, a.k.a. word embeddings, a family of Natural Language Processing (NLP) algorithms where words are mapped to vectors. An important property of these vector is being able to capture semantic relationships, for example: Ireland - Dublin + London = ??? These techniques have been driving important improvements in many NLP applications over the past few years, so the interest around word embeddings is spreading. In this talk, we'll discuss the basic linguistic intuitions behind word embeddings, we'll compare some of the most popular word embedding approaches, from word2vec to fastText, and we'll showcase their use with Python libraries. The aim of the talk is to be approachable for beginners, so the theory is kept to a minimum.&lt;/p&gt;
&lt;p&gt;By attending this talk, you'll be able to learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the core features of word embeddings&lt;/li&gt;
&lt;li&gt;how to choose between different word embedding algorithms&lt;/li&gt;
&lt;li&gt;how to implement word embedding techniques in Python&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Bonzanini</dc:creator><pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-21:pycon-ireland-2017/understanding-natural-language-using-word-vectors.html</guid></item><item><title>Understanding Natural Language with Word Vectors</title><link>http://pyvideo.org/pycon-uk-2017/understanding-natural-language-with-word-vectors.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is an introduction to word vectors, a.k.a. word embeddings, a family of Natural Language Processing (NLP) algorithms where words are mapped to vectors.&lt;/p&gt;
&lt;p&gt;An important property of these vector is being able to capture semantic relationships, for example: UK - London + Paris = ???&lt;/p&gt;
&lt;p&gt;These techniques have been driving important improvements in many NLP applications over the past few years, so the interest around word embeddings is spreading. In this talk, we'll discuss the basic linguistic intuitions behind word embeddings, we'll compare some of the most popular word embedding approaches, from word2vec to fastText, and we'll showcase their use with Python libraries.&lt;/p&gt;
&lt;p&gt;The aim of the talk is to be approachable for beginners, so the theory is kept to a minimum.&lt;/p&gt;
&lt;p&gt;By attending this talk, you'll be able to learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the core features of word embeddings&lt;/li&gt;
&lt;li&gt;how to choose between different word embedding algorithms&lt;/li&gt;
&lt;li&gt;how to implement word embedding techniques in Python&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Bonzanini</dc:creator><pubDate>Fri, 27 Oct 2017 12:30:00 +0100</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-27:pycon-uk-2017/understanding-natural-language-with-word-vectors.html</guid></item><item><title>Word Embeddings for Natural Language Processing in Python</title><link>http://pyvideo.org/pycon-italia-2017/word-embeddings-for-natural-language-processing-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Word embeddings are a family of Natural Language Processing (NLP)
algorithms where words are mapped to vectors in low-dimensional space.
The interest around word embeddings has been on the rise in the past few
years, because these techniques have been driving important improvements
in many NLP applications like text classification, sentiment analysis or
machine translation.&lt;/p&gt;
&lt;p&gt;In this talk we’ll describe the intuitions behind this family of
algorithms, we’ll explore some of the Python tools that allow us to
implement modern NLP applications and we’ll conclude with some practical
considerations.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Bonzanini</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/word-embeddings-for-natural-language-processing-in-python.html</guid><category>Python</category><category>nlp</category><category>text-analysis</category><category>pydata</category></item><item><title>Static Type Analysis for Robust Data Products</title><link>http://pyvideo.org/pydata-london-2017/static-type-analysis-for-robust-data-products.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Filmed at PyData London 2017&lt;/p&gt;
&lt;p&gt;Description
This talk discusses static type analysis applied to Python data products, its pros and cons, and overall how to adopt type checking tools (i.e. mypy) in your workflow.&lt;/p&gt;
&lt;p&gt;Abstract
As a dynamically typed language, Python is an extremely flexible tool that allows to write code quickly and concisely. This flexibility makes Python a popular tool for R&amp;amp;D and prototyping, but what about bringing Data Science in production? When comparing Python to statically typed languages, one of the downsides is that many type-related errors are not captured until runtime.&lt;/p&gt;
&lt;p&gt;This talk discusses the steps taken by the Python community to promote static type analysis, in particular the semantic definition of type hints and the adoption of mypy as type checking tool.&lt;/p&gt;
&lt;p&gt;The audience will learn about static typing for Python, its pros and cons, and how to adopt static type analysis in your workflow. Since the focus is on building and deploying data products, static type analysis is discussed as a mean to improve the robustness of your data products.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Bonzanini</dc:creator><pubDate>Sat, 06 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-06:pydata-london-2017/static-type-analysis-for-robust-data-products.html</guid></item><item><title>Building data pipelines in python</title><link>http://pyvideo.org/pycon-italia-2016/building-data-pipelines-in-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Bonzanini</dc:creator><pubDate>Tue, 05 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-05:pycon-italia-2016/building-data-pipelines-in-python.html</guid></item><item><title>Building Data Pipelines in Python</title><link>http://pyvideo.org/pydata-london-2016/marco-bonzanini-building-data-pipelines-in-python-1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData London 2016&lt;/p&gt;
&lt;p&gt;This talk discusses the process of building data pipelines, e.g. extraction, cleaning, integration, pre-processing of data, in general all the steps that are necessary to prepare your data for your data-driven product. In particular, the focus is on data plumbing and on the practice of going from prototype to production.&lt;/p&gt;
&lt;p&gt;This talk discusses the process of building data pipelines, e.g. extraction, cleaning, integration, pre-processing of data, in general all the steps that are necessary to prepare your data for your data-driven product. In particular, the focus is on data plumbing and on the practice of going from prototype to production.&lt;/p&gt;
&lt;p&gt;Starting from some common anti-patterns, we'll highlight the need for a workflow manager for any non-trivial project.&lt;/p&gt;
&lt;p&gt;We'll discuss the case for Luigi as an interesting option to consider, and we'll consider where it fits in the bigger picture of deploying a data product.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="https://speakerdeck.com/marcobonzanini/building-data-pipelines-in-python-pydata-london-2016"&gt;https://speakerdeck.com/marcobonzanini/building-data-pipelines-in-python-pydata-london-2016&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Bonzanini</dc:creator><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-11:pydata-london-2016/marco-bonzanini-building-data-pipelines-in-python-1.html</guid></item><item><title>Building Data Pipelines in Python</title><link>http://pyvideo.org/pydata-london-2016/marco-bonzanini-building-data-pipelines-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData London 2016&lt;/p&gt;
&lt;p&gt;This talk discusses the process of building data pipelines, e.g. extraction, cleaning, integration, pre-processing of data, in general all the steps that are necessary to prepare your data for your data-driven product. In particular, the focus is on data plumbing and on the practice of going from prototype to production.&lt;/p&gt;
&lt;p&gt;Starting from some common anti-patterns, we'll highlight the need for a workflow manager for any non-trivial project.&lt;/p&gt;
&lt;p&gt;We'll discuss the case for Luigi as an interesting option to consider, and we'll consider where it fits in the bigger picture of deploying a data product.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="https://speakerdeck.com/marcobonzanini/building-data-pipelines-in-python-pydata-london-2016"&gt;https://speakerdeck.com/marcobonzanini/building-data-pipelines-in-python-pydata-london-2016&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Bonzanini</dc:creator><pubDate>Sun, 08 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-08:pydata-london-2016/marco-bonzanini-building-data-pipelines-in-python.html</guid></item></channel></rss>