<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_max-humber.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-06-30T00:00:00+00:00</updated><entry><title>Patsy: The Lingua Franca to and from R</title><link href="http://pyvideo.org/pydata-berlin-2017/patsy-the-lingua-franca-to-and-from-r.html" rel="alternate"></link><published>2017-06-30T00:00:00+00:00</published><updated>2017-06-30T00:00:00+00:00</updated><author><name>Max Humber</name></author><id>tag:pyvideo.org,2017-06-30:pydata-berlin-2017/patsy-the-lingua-franca-to-and-from-r.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to build R-like statistical models in Python with Patsy and scikit-learn.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Creating linear and logistic models in R is dead simple. If your numpy/panda-fu isn’t all that great than it’s a lot harder to do in Python. In R, for instance, you can declare a model with a formula as simple as y ~ x1 + x2. But in Python, you have to split out your target and input variables and make sure that the matrices work within the scikit-learn API.&lt;/p&gt;
&lt;p&gt;In this talk I will introduce the Patsy package for describing and creating statistical models in Python. I’ll walk through how to implement a logistic regression with Patsy and scikit-learn and I’ll emphasize Patsy as a bridge for those who want to better understand Python and/or R.&lt;/p&gt;
</summary></entry></feed>