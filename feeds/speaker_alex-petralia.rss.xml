<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Fri, 11 May 2018 00:00:00 +0000</lastBuildDate><item><title>Analyzing Data: What pandas and SQL Taught Me About Taking an Average</title><link>http://pyvideo.org/pycon-us-2018/analyzing-data-what-pandas-and-sql-taught-me-about-taking-an-average.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“So tell me,” my manager said, “what is an average?”&lt;/p&gt;
&lt;p&gt;There’s probably nothing worse than that sinking feeling when you finish an analysis, email it to your manager or client to review, and they point out a mistake so basic you can’t even fathom how you missed it.&lt;/p&gt;
&lt;p&gt;This talk is about mine: how to take an average.&lt;/p&gt;
&lt;p&gt;Averages are something we use everywhere - it’s a simple &lt;tt class="docutils literal"&gt;np.mean()&lt;/tt&gt; in pandas or &lt;tt class="docutils literal"&gt;AVG()&lt;/tt&gt; in SQL. But recently I’ve come to appreciate just how easy it is to calculate this statistic incorrectly. We learn once - in middle school no less - how to take an average, and never revisit it. Then, when we are faced with multidimensional datasets (ie. pretty much every dataset out there), we never reconsider whether we should be taking an average the same way.&lt;/p&gt;
&lt;p&gt;In this talk, we follow my arduous and humbling journey of learning how to properly take an average with multidimensional data. We will cover how improperly calculating it can produce grossly incorrect figures, which can slip into publications, research analyses and management reports.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Petralia</dc:creator><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-11:pycon-us-2018/analyzing-data-what-pandas-and-sql-taught-me-about-taking-an-average.html</guid></item></channel></rss>