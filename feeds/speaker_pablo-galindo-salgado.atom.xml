<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_pablo-galindo-salgado.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-09-23T17:00:00+02:00</updated><entry><title>Metaclases: exactamente qué y (sobre todo) por qué</title><link href="http://pyvideo.org/pycon-es-2017/metaclases-exactamente-que-y-sobre-todo-por-que.html" rel="alternate"></link><published>2017-09-23T17:00:00+02:00</published><updated>2017-09-23T17:00:00+02:00</updated><author><name>Pablo Galindo Salgado</name></author><id>tag:pyvideo.org,2017-09-23:pycon-es-2017/metaclases-exactamente-que-y-sobre-todo-por-que.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El objetivo de estar charla es abordar un problema que parece ser desafortunadamente común entre el material disponible sobre las metaclases: por más que nos lo expliquen nos sigue sin quedar claro qué son las metaclases… o lo olvidamos a los diez minutos. Los ejemplos que se usan para ilustrar esa cosa tan arcana son casi inevitablemente crípticos, solucionando de forma compleja problemas demasiado rebuscados y que no nos hemos encontrado jamás en nuestro día a día. ¿Tienen realmente alguna utilidad práctica, o son sólo una excusa usada por ponentes para parecer r/iamverysmart? ¿Por qué deberían importarme a mí, con mi nivel medio de Python?&lt;/p&gt;
&lt;p&gt;Lo que vamos a hacer en esta charla es empezar describiendo un problema: queremos implementar el mismo comportamiento (por ejemplo, logging) en todos los métodos de mi clase. Para ello tenemos varias opciones, en creciente orden de complejidad: (a) copiar y pegar la misma línea de código en todos los métodos, (b) usar un decorador en cada método y (c) usar un decorador de clase. Pero ninguna solución es ideal, y la falta de elegancia provoca lamentos y lágrimas. Es ante un problema así cuando las metaclases tienen una función, y agradeceremos que se encuentren en nuestro repertorio de habilidades de Python.&lt;/p&gt;
&lt;p&gt;Entendiendo por qué nos hacen falta, procedereremos a explicar cómo crear una: primero repasando brevemente la función de __new__() e __init__() para clases normales, y a continuación mostrando cómo hacer lo mismo con las metaclases. Ilustraremos esto con varios ejemplos, usando metaclases para añadir funcionalidad de auto-logging o compilación just-in-time, como hace Numba, a nuestro código. Por último, y a modo de curiosidad, continuaremos hacia mayores niveles de abstracción, aprendiendo qué son los hooks de metaclases y para qué son útiles los ficheros .pth.&lt;/p&gt;
</summary><category term="metaclass"></category></entry><entry><title>Parallel and non parallel stuff</title><link href="http://pyvideo.org/pycon-es-2017/parallel-and-non-parallel-stuff.html" rel="alternate"></link><published>2017-09-22T15:00:00+02:00</published><updated>2017-09-22T15:00:00+02:00</updated><author><name>Pablo Galindo Salgado</name></author><id>tag:pyvideo.org,2017-09-22:pycon-es-2017/parallel-and-non-parallel-stuff.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;¡Oh no: otro tutorial de programación paralela y asíncrona en Python! ¿Cúando dejarán de insistir en el mismo asunto una y otra vez? Si alguna vez te has preguntado esto, este NO es tu taller. En cambio, si quieres volver a oir lo mismo de siempre acerca de hilos, procesos, el GIL, asyncio y demás amigos...¡Este es el taller de tus sueños! En este tutorial haremos un viaje através de todos estos conceptos desde la base, entendiendo en detalle los conceptos, los problemas y las soluciones.&lt;/p&gt;
</summary><category term="workshop"></category></entry><entry><title>Agujeros negros y optimización de código en python</title><link href="http://pyvideo.org/pycon-es-2015/agujeros-negros-y-optimizacion-de-codigo-en-python.html" rel="alternate"></link><published>2016-02-02T00:00:00+00:00</published><updated>2016-02-02T00:00:00+00:00</updated><author><name>Pablo Galindo Salgado</name></author><id>tag:pyvideo.org,2016-02-02:pycon-es-2015/agujeros-negros-y-optimizacion-de-codigo-en-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla atenderemos a la construcción de un raytracer relativista en Python. Nuestro objetivo será conseguir imágenes similares a las observadas en la película Interestellar, mediante la creación de imágenes sintéticas en un entorno de gravedad extrema, como es un agujero negro. Utilizando esto como excusa, analizaremos distintos enfoques para optimizar nuestro código al máximo y conseguir programas eficientes y profesionales a la altura de cualquier otro lenguaje de programación.&lt;/p&gt;
</summary><category term="Track Científico"></category></entry></feed>