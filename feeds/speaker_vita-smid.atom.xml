<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_vita-smid.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-07-13T00:00:00+00:00</updated><entry><title>Algorithmic trading with asyncio</title><link href="http://pyvideo.org/pycon-cz-2016/algorithmic-trading-with-asyncio.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Vita Smid</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/algorithmic-trading-with-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;My team and I have been building a Python 3 stock trading platform
for the past 2.5 years. We are powering a trading fund that runs a
range of manual and automated strategies. This is a story of what we
have learned about Asyncio, profiling, optimization, debugging, and
operations... in a fast-moving environment where bugs actually cost
money.&lt;/p&gt;
</summary></entry><entry><title>Building an algorithmic trading platform in Python 3</title><link href="http://pyvideo.org/pycon-cz-2017/building-an-algorithmic-trading-platform-in-python-3.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Víťa Šmíd</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/building-an-algorithmic-trading-platform-in-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For the past three years, my colleagues and I have been developing
and operating a Python system that trades in the stock market.&lt;/p&gt;
&lt;p&gt;I am going to tell you a story of how we developed and scaled this
platform. We made some rather good decisions, as well as many
mistakes that everyone can learn from. Some of our code is open
source and you can use it in your own projects.&lt;/p&gt;
&lt;p&gt;We started with a small event-driven application built with asyncio.
As our trading expanded, our application has grown into a multi-agent
monolith: hundreds of modules operating in a single asyncio-managed
process. Today, we are moving to a more distributed approach. Some
parts of the platform run in isolated processes and communicate
asynchronously.&lt;/p&gt;
&lt;p&gt;I am going to show you a few challenges we have faced on this
journey, and what they taught us about Python, asyncio, distributed
systems, debugging, and making painful compromises. You don't need to
know anything about trading. In fact, it turns out that these are
mostly quite fundamental computer science problems that pop up over
and over again, regardless of what you're building…&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Víťa travels the world, writes software and ponders on philosophy.&lt;/p&gt;
&lt;p&gt;He likes to solve hard problems, preferably involving mathematics,
finance and lots of data. Python has been his language of choice for
many years and lately he's very much into latest developments like
asyncio and type hints.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks 2017-07-13</title><link href="http://pyvideo.org/europython-2017/lightning-talks-2017-07-13.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Vitalii Vokhmin</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/lightning-talks-2017-07-13.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks
EuroPython 2017 - 2017-07-13 - Anfiteatro 2&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Feeding a real-time user interface</title><link href="http://pyvideo.org/europython-2017/feeding-a-real-time-user-interface.html" rel="alternate"></link><published>2017-07-11T00:00:00+00:00</published><updated>2017-07-11T00:00:00+00:00</updated><author><name>Vita Smid</name></author><id>tag:pyvideo.org,2017-07-11:europython-2017/feeding-a-real-time-user-interface.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Imagine you have some streaming computations running on a server.
Client programs subscribe to real-time updates, so that they may
visualise the computations for end users.&lt;/p&gt;
&lt;p&gt;How do you share this constantly changing server state with all
connected clients? Sending an entire snapshot after each change is
very inefficient, so you must implement some sort of incremental
updates – diffs.&lt;/p&gt;
&lt;p&gt;But how do you generate these diffs on the server? And how do you
represent them so the clients know how to apply them to update their
own state?&lt;/p&gt;
&lt;p&gt;We have been working on these problems for a long time while building
a stock trading platform in Python. I'd like to show you a couple of
open source libraries that we developed for this purpose, and share
our experience with tracking state and propagating it to user
interfaces running in other processes.&lt;/p&gt;
</summary></entry></feed>