<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_martin-christen.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-07-12T00:00:00+00:00</updated><entry><title>Rendering complex 3D-Geodata using pyRT</title><link href="http://pyvideo.org/europython-2017/rendering-complex-3d-geodata-using-pyrt.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Martin Christen</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/rendering-complex-3d-geodata-using-pyrt.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyRT (pronounced &amp;quot;pirate&amp;quot;) is a rather new open source project
creating a ray tracer in pure Python and some optional CPU/GPU
acceleration using bindings. Ray tracing is a technique for
generating an image by tracing the path of light.&lt;/p&gt;
&lt;p&gt;PyRT was created to render large 3D City models. In this talk, the
possibilities and experiences of ray tracing in Python using pyRT are
shown. pyRT also runs in the Jupyter Notebook.&lt;/p&gt;
&lt;p&gt;Rendering complex 3D-Geodata, such as 3D-City models with an
extremely high polygon count and a vast amount of textures at
interactive framerates is still a very challenging task, especially
on mobile devices. This talk presents an approach for processing,
caching and serving massive geospatial data in a cloud-based
environment for large scale, out-of-core, highly scalable 3D scene
rendering in a web-based solution. PyRT  is used for rendering large
amounts of geospatial data. The approach for processing, rendering
and caching 3D-City Models is shown.&lt;/p&gt;
&lt;p&gt;Screenshots:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/martinchristen/pyRT/raw/master/jupyter/img/sponza.png"&gt;https://github.com/martinchristen/pyRT/raw/master/jupyter/img/sponza.png&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/martinchristen/pyRT/blob/master/jupyter/img/Berlin_AO_small.PNG?raw=true"&gt;https://github.com/martinchristen/pyRT/blob/master/jupyter/img/Berlin_AO_small.PNG?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Making Games with Python: Mission Impossible?</title><link href="http://pyvideo.org/europython-2017/making-games-with-python-mission-impossible.html" rel="alternate"></link><published>2017-07-11T00:00:00+00:00</published><updated>2017-07-11T00:00:00+00:00</updated><author><name>Martin Christen</name></author><id>tag:pyvideo.org,2017-07-11:europython-2017/making-games-with-python-mission-impossible.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A discussion about making full-featured, commercial games in python,
both 2D and 3D.&lt;/p&gt;
&lt;p&gt;Looking at state of the art approaches to using python in gaming, we
will compare the alternatives: pygame (2D API), OpenGL (via
pygame/pySDL2), Unreal Engine 4 and the Godot Engine (with further
comparison to Unity 3D game engine).&lt;/p&gt;
&lt;p&gt;We will also look at other benefits of using python in the gaming
context, such as integration with 3D modelling software, scripting
the asset pipeline and GIS data integration.&lt;/p&gt;
&lt;p&gt;Finally, can (and should) python move beyond being the language of
plugins and scripts, and become the main language for creating game
development projects?&lt;/p&gt;
</summary></entry><entry><title>Martin Christen – 3D Computer Graphics with Python – SPS16</title><link href="http://pyvideo.org/swiss-python-summit-2016/martin-christen-3d-computer-graphics-with-python-sps16.html" rel="alternate"></link><published>2016-02-05T00:00:00+00:00</published><updated>2016-02-05T00:00:00+00:00</updated><author><name>Martin Christen</name></author><id>tag:pyvideo.org,2016-02-05:swiss-python-summit-2016/martin-christen-3d-computer-graphics-with-python-sps16.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;In this talk several technologies around 3D graphics for Python are presented. A brief introduction to scripting Blender shows the possibilities of creating complex 3D worlds and games. The second part shows how to create low level 3D applications and how Python is used to create preprocessed 3D worlds for the webbrowser.&amp;quot;&lt;/p&gt;
&lt;p&gt;Talk recorded at the Swiss Python Summit on February 5th, 2016.&lt;/p&gt;
&lt;p&gt;Licensed as Creative Commons Attribution 4.0 International.&lt;/p&gt;
</summary></entry></feed>