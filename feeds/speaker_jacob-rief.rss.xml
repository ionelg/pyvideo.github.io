<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>http://pyvideo.org/</link><description></description><lastBuildDate>Sat, 27 May 2017 00:00:00 +0000</lastBuildDate><item><title>Django-CMS Cascade plugin system</title><link>http://pyvideo.org/pyconweb-2017/django-cms-cascade-plugin-system.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django-CMS-Cascade, is a feature rich plugin system for Django-CMS, which is easy to extend and without adding new database models.
In this presentation I will show how to integrate this plugin system into a running Django-CMS installation and show how one can quickly create impressive websites.Then I will show how one can create his own plugins with a few lines of Python and HTML code. Furthermore I will show how to extend all plugins with common functionality, such as shared attributes, inline styles and classes, private rendering templates and content versioning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Rief</dc:creator><pubDate>Sat, 27 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-27:pyconweb-2017/django-cms-cascade-plugin-system.html</guid><category>django-cms-cascade</category></item><item><title>Lightning talks - Monday</title><link>http://pyvideo.org/djangocon-europe-2017/lightning-talks-monday.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks covering painless.cloud &amp;amp; SCSS&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Bittner</dc:creator><pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-03:djangocon-europe-2017/lightning-talks-monday.html</guid><category>lightning talks</category></item><item><title>Make AngularJS play nice together with Django</title><link>http://pyvideo.org/djangocon-europe-2014/make-angularjs-play-nice-together-with-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django intentionally has been designed as a pure server side framework,
thus being agnostic about client side programming, except for the Django
admin interface, which uses jQuery. Letting developers choose their
preferred client side framework has been a wise decision by Django
community. However, in most cases the de-facto standard, hence jQuery,
is used. In the past years, other Javascript frameworks have emerged,
namely Knockout, EmberJS, Backbone and AngularJS. They all attempt to
circumvent to shortcomings of jQuery. Since Django developers are
familiar with the concept of Model-View-Control, they might feel even
more comfortable with one of these frameworks, rather than with jQuery.&lt;/p&gt;
&lt;p&gt;In my proposed talk, I would like to give a short introduction into
AngularJS’s two-way data-binding, which can dramatically reduce
boilerplate code, otherwise required when using jQuery. Furthermore,
this talk will handle the following topics: - How to render model-bound
forms for AngularJS, using mixin classes to be added to the built in
Django form. - How Django’s form validation can be used to pre-validate
the form data on the client, using the AngularJS Model controller, but
without duplicating code. - How to securely call Django view’s methods
from inside an AngularJS controller, with a behaviour similar to remote
procedure calls. - How to use dependency injection to separate concern
for external data, either created by Django for production use, or by a
mocking class when writing unit tests for browsers code. - Three-way
data-binding build on top of AngularJS’s two-way data- binding using
websockets for bidirectional synchronization of the browsers view model
with server side data buckets.&lt;/p&gt;
&lt;p&gt;In-depth documentation on the topics of the proposed talk can be found
here: &lt;a class="reference external" href="http://django-angular.readthedocs.org/en/latest/"&gt;http://django-angular.readthedocs.org/en/latest/&lt;/a&gt;
&lt;a class="reference external" href="http://django-websocket"&gt;http://django-websocket&lt;/a&gt;- redis.readthedocs.org/en/latest/&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Rief</dc:creator><pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-05-15:djangocon-europe-2014/make-angularjs-play-nice-together-with-django.html</guid></item><item><title>djangoSHOP is back</title><link>http://pyvideo.org/pycon-de-2016/djangoshop-is-back.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2010 Divio, the company behind djangoCMS started to develop djangoSHOP. Now after two years of silence, a new version of djangoSHOP is back, offering a REST API and a Finite State Machine for programmable workflows. Nevertheless djangoSHOP aims to be a minimalistic, but feature complete e-commerce framework, applying modern concepts such as Atomic Web Design as propagated by Brad Frost. This shifts page centric development with Models, Views and Templates to component based development using Models, Serializers and Atoms or Molecules.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Rief</dc:creator><pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-30:pycon-de-2016/djangoshop-is-back.html</guid></item><item><title>Django SHOP è ritornato</title><link>http://pyvideo.org/pycon-italia-2016/django-shop-e-ritornato.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Rief</dc:creator><pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-20:pycon-italia-2016/django-shop-e-ritornato.html</guid></item></channel></rss>