<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_jason-owen.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2017-10-06T00:00:00+00:00</updated><entry><title>Code Review, Forwards and Back</title><link href="http://pyvideo.org/pygotham-2017/code-review-forwards-and-back.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Sumana Harihareswara</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/code-review-forwards-and-back.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The setting: an office conference room. The characters: a developer, who's written a chunk of new Python code, and a team lead, who's about to review it. You'll see the code. It's not great.&lt;/p&gt;
&lt;p&gt;What happens if the reviewer waves it through, or lets conflict aversion get the best of them? What if the reviewer says it should be &amp;quot;better&amp;quot; but doesn't articulate how? What if the review is abrasive, or nitpicky, or laid-back? What if the reviewer rewrites the code right there and then? And if we fast-forward to the same team years later, how has this code reviewing style affected the quality and evolution of the codebase, and the team's culture, skill and sustainability?&lt;/p&gt;
&lt;p&gt;See a fast-paced montage of ways things can go. Recognize patterns from your past and present. Learn scripts for phrasing criticism constructively. And laugh.&lt;/p&gt;
</summary></entry></feed>