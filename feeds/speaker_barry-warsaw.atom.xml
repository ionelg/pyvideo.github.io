<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_barry-warsaw.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2018-05-12T00:00:00+00:00</updated><entry><title>Get your resources faster, with importlib.resources</title><link href="http://pyvideo.org/pycon-us-2018/get-your-resources-faster-with-importlibresources.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Barry Warsaw</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/get-your-resources-faster-with-importlibresources.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Resources are files that live within Python packages.  Think test data files, certificates, templates, translation catalogs, and other static files you want to access from Python code.  Sometimes you put these static files in a package directory within your source tree, and then locate them by importing the package and using its &lt;cite&gt;__file__&lt;/cite&gt; attribute.  But this doesn't work for zip files!&lt;/p&gt;
&lt;p&gt;You could use &lt;cite&gt;pkg_resources&lt;/cite&gt;, an API that comes with &lt;cite&gt;setuptools&lt;/cite&gt; and hides the differences between files on the file system and files in a zip file.  This is great because you don't have to use &lt;cite&gt;__file__&lt;/cite&gt;, but it's not so great because &lt;cite&gt;pkg_resources&lt;/cite&gt; is a big library and can have potentially severe performance problems, even at import time.&lt;/p&gt;
&lt;p&gt;Welcome to &lt;cite&gt;importlib.resources&lt;/cite&gt;, a new module and API in Python 3.7 that is also available as a standalone library for older versions of Python.  &lt;cite&gt;importlib.resources&lt;/cite&gt; is build on top of Python's existing import system, so it is very efficient.  It also defines an abstract base class which loaders can implement to provide their own resource access.  Python's built-in zipimporter uses this to provide efficient access to resources within a zip file.  Third party import hooks can do the same, so resources can come from anything that is importable by Python.&lt;/p&gt;
&lt;p&gt;This talk will step through the motivations behind &lt;cite&gt;importlib.resources&lt;/cite&gt;, the library's usage, its interfaces, and the hooks made available to third party packages.  It will also talk about the minor differences between the standalone version and the version in Python 3.7's standard library.  Hopefully audience members will come away with compelling reasons to port their code to this much more efficient library.&lt;/p&gt;
</summary></entry><entry><title>aiosmtpd - A better asyncio based SMTP server</title><link href="http://pyvideo.org/pycon-us-2017/aiosmtpd-a-better-asyncio-based-smtp-server.html" rel="alternate"></link><published>2017-05-21T00:00:00+00:00</published><updated>2017-05-21T00:00:00+00:00</updated><author><name>Barry Warsaw</name></author><id>tag:pyvideo.org,2017-05-21:pycon-us-2017/aiosmtpd-a-better-asyncio-based-smtp-server.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;smtpd.py has been in the standard library for many years. It's been a
common tool for deploying SMTP and LMTP servers that handle email-based
communication in Python, providing both basic protocol implementations
and a fundamental module for higher level tools, such as lazr.smtptest
for testing email clients. Based on asyncore and asynchat, smtpd.py is
showing its age, and its API is unwieldy.&lt;/p&gt;
&lt;p&gt;Fortunately, there's a new alternative available. aiosmtpd is a modern
reinvention based on asyncio, with all the improvements that come along
with such a new implementation. It provides servers for both the SMTP
and LMTP protocols, as well as a higher level &amp;quot;controller&amp;quot; API for
testing SMTP and LMTP clients. It exposes a much better API for
customization, allowing the user to associate a simple &amp;quot;handler&amp;quot; to
process incoming messages without having to worry about the details of
the protocols, and it provides some useful hooks for subclassing.&lt;/p&gt;
&lt;p&gt;This talk will describe the purpose and history of smtpd.py and
aiosmtpd, show how users can extend the servers and implement
specialized handlers, and show how applications can use the testing API
for ensuring that their email sending applications do the right things.
Examples will be taken from GNU Mailman 3, which uses aiosmtpd
extensively.&lt;/p&gt;
</summary></entry><entry><title>Tai Chi Principles for Mindful Programmers</title><link href="http://pyvideo.org/kiwi-pycon-2016/tai-chi-principles-for-mindful-programmers.html" rel="alternate"></link><published>2016-09-11T00:00:00+00:00</published><updated>2016-09-11T00:00:00+00:00</updated><author><name>Barry Warsaw</name></author><id>tag:pyvideo.org,2016-09-11:kiwi-pycon-2016/tai-chi-principles-for-mindful-programmers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Barry Warsaw
&lt;a class="reference external" href="https://kiwi.pycon.org/schedule/presentation/141/"&gt;https://kiwi.pycon.org/schedule/presentation/141/&lt;/a&gt;
I've been playing music all my life, programming for almost 40 years, using Python for more than 20, and studying tai chi for nearly 15.  These life-long pursuits continue to reveal their truths as fun and interesting vocations and avocations.  My study of tai chi has had particularly profound consequences and in this talk I'll explore some of its applications to the world of programming.&lt;/p&gt;
</summary></entry><entry><title>Mailman 3</title><link href="http://pyvideo.org/pycon-us-2012/mailman-3.html" rel="alternate"></link><published>2012-03-10T00:00:00+00:00</published><updated>2012-03-10T00:00:00+00:00</updated><author><name>Barry Warsaw</name></author><id>tag:pyvideo.org,2012-03-10:pycon-us-2012/mailman-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Mailman 3 has been in development for several years. This is an
evolution of the ever popular mailing list management system that runs
thousands of mailing lists around the world. This talk describes how the
code has been modernized and how the architectural deficiencies of
Mailman 2 have been addressed using REST and other technologies. This is
a spinoff from the AOSA chapter on Mailman 3.&lt;/p&gt;
</summary></entry></feed>